matching.row 0
matching.col 0
commandLine {
    
    0
    0
}
find {
    
    0
    0
}
grep {
    
    0
    0
}
name {
    
    0
    0
}
replace {
    
    0
    0
}
search {
    
    0
    0
}
visualType 0
dontRecordKey 0
dontSave 0
fileExplorerOpen 0
playingCommand 0
recording 0
replacing 0
runningAsRoot 0
searchFail 0
searching 0
selectAll 0
showAllGrep 0
showFileStack 0
showGrep 0
blameSize 65
buildErrorIndex 0
fileExplorerIndex 0
fileExplorerWindowLine 0
historyPosition 1
lastSave 1
maxY 30
maxX 100
buildDir .
commentSymbol //
filename test-file.h
grepPath 
keys [
    { key: G mode: SHORTCUTS }
    { key: V mode: SHORTCUTS }
    { key: g mode: VISUAL }
    { key: g mode: VISUAL }
    { key: d mode: VISUAL }
    { key: P mode: SHORTCUTS }
]
prevKeys 
status 
motion []
findOutput []
blame []
data [
    #include <X11/XF86keysym.h>
    
    /* See LICENSE file for copyright and license details. */
    
    /* appearance */
    static const unsigned int borderpx = 1; /* border pixel of windows */
    static const unsigned int snap = 32; /* snap pixel */
    static const int showbar = 1; /* 0 means no bar */
    static const int topbar = 1; /* 0 means bottom bar */
    static const char *fonts[] = { "DejaVuSansM Nerd Font:size=16" };
    static const char dmenufont[] = "DejaVuSansM Nerd Font:size=16";
    static const char col_gray1[] = "#222222";
    static const char col_gray2[] = "#444444";
    static const char col_gray3[] = "#bbbbbb";
    static const char col_gray4[] = "#eeeeee";
    static const char col_cyan[] = "#006400";
    static const char *colors[][3] = {
    	/*               fg         bg         border   */
    	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
    	[SchemeSel] = { col_gray4, col_cyan, col_cyan },
    };
    
    /* tagging */
    static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
    
    static const Rule rules[] = {
    	/* xprop(1):
    	 *	WM_CLASS(STRING) = instance, class
    	 *	WM_NAME(STRING) = title
    	 */
    	/* class      instance    title       tags mask     isfloating   monitor */
    	{ "Gimp", NULL, NULL, 0, 1, -1 },
    	{ "Firefox", NULL, NULL, 1 << 8, 0, -1 },
    };
    
    /* layout(s) */
    static const float mfact = 0.55; /* factor of master area size [0.05..0.95] */
    static const int nmaster = 1; /* number of clients in master area */
    static const int resizehints = 1; /* 1 means respect size hints in tiled resizals */
    static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
    
    static const Layout layouts[] = {
    	/* symbol     arrange function */
    	{ "[]=", tile }, /* first entry is default */
    	{ "><>", NULL }, /* no layout function means floating behavior */
    	{ "[M]", monocle },
    };
    
    /* key definitions */
    #define MODKEY Mod4Mask
    #define TAGKEYS(KEY, TAG)                                                                           \
    	{ 0, KEY, view, { .ui = 1 << TAG } }, { ControlMask, KEY, toggleview, { .ui = 1 << TAG } }, \
    		{ ShiftMask, KEY, tag, { .ui = 1 << TAG } },                                        \
    		{ ControlMask | ShiftMask, KEY, toggletag, { .ui = 1 << TAG } },
    
    /* helper for spawning shell commands in the pre dwm-5.0 fashion */
    #define SHCMD(cmd)                                 \
    	{                                          \
    		.v = (const char *[])              \
    		{                                  \
    			"/bin/sh", "-c", cmd, NULL \
    		}                                  \
    	}
    
    /* commands */
    static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
    static const char *dmenucmd[] = { "dmenu_run", "-m",	  dmenumon, "-fn",    dmenufont, "-nb",	    col_gray1,
    				  "-nf",       col_gray3, "-sb",    col_cyan, "-sf",	 col_gray4, NULL };
    static const char *termcmd[] = { "st", NULL };
    
    static const char *inclight[] = { "sudo", "brightnessctl", "set", "10%+", NULL };
    static const char *declight[] = { "sudo", "brightnessctl", "set", "10%-", NULL };
    static const char *mutecmd[] = { "amixer", "-q", "set", "Master", "toggle", NULL };
    static const char *volupcmd[] = { "amixer", "-q", "set", "Master", "10%+", "unmute", NULL };
    static const char *voldowncmd[] = { "amixer", "-q", "set", "Master", "10%-", "unmute", NULL };
    static const char *statusbar[] = { "/bin/statusbar", NULL };
    
    static const Key keys[] = {
    	/* modifier                     key        function        argument */
    	{ ControlMask, XK_space, spawn, { .v = dmenucmd } },
    	{ MODKEY, XK_j, focusstack, { .i = +1 } },
    	{ MODKEY, XK_k, focusstack, { .i = -1 } },
    	{ MODKEY | ShiftMask, XK_c, killclient, { 0 } },
    	{ MODKEY, XK_comma, focusmon, { .i = -1 } },
    	{ MODKEY, XK_period, focusmon, { .i = +1 } },
    	{ MODKEY | ShiftMask, XK_comma, tagmon, { .i = -1 } },
    	{ MODKEY | ShiftMask, XK_period, tagmon, { .i = +1 } },
    	{ MODKEY, XK_i, incnmaster, { .i = +1 } },
    	{ MODKEY, XK_d, incnmaster, { .i = -1 } },
    	{ MODKEY, XK_b, togglebar, { 0 } },
    	{ MODKEY, XK_h, setmfact, { .f = -0.05 } },
    	{ MODKEY, XK_l, setmfact, { .f = +0.05 } },
    	{ 0, XF86XK_AudioMute, spawn, { .v = mutecmd } },
    	{ 0, XF86XK_AudioMute, spawn, { .v = statusbar } },
    	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = voldowncmd } },
    	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = statusbar } },
    	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = volupcmd } },
    	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = statusbar } },
    	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = inclight } },
    	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = statusbar } },
    	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = declight } },
    	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = statusbar } },
    	TAGKEYS(XK_F1, 0) TAGKEYS(XK_F2, 1) TAGKEYS(XK_F3, 2) TAGKEYS(XK_F4, 3) TAGKEYS(XK_F5, 4) TAGKEYS(XK_F6, 5)
    		TAGKEYS(XK_F7, 6) TAGKEYS(XK_F8, 7) TAGKEYS(XK_F9, 8){ MODKEY | ShiftMask, XK_q, quit, { 0 } },
    };
    
    /* button definitions */
    /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
    static const Button buttons[] = {
    	/* click                event mask      button          function        argument */
    	{ ClkLtSymbol, 0, Button1, setlayout, { 0 } },
    	{ ClkLtSymbol, 0, Button3, setlayout, { .v = &layouts[2] } },
    	{ ClkWinTitle, 0, Button2, zoom, { 0 } },
    	{ ClkStatusText, 0, Button2, spawn, { .v = termcmd } },
    	{ ClkClientWin, MODKEY, Button1, movemouse, { 0 } },
    	{ ClkClientWin, MODKEY, Button2, togglefloating, { 0 } },
    	{ ClkClientWin, MODKEY, Button3, resizemouse, { 0 } },
    	{ ClkTagBar, 0, Button1, view, { 0 } },
    	{ ClkTagBar, 0, Button3, toggleview, { 0 } },
    	{ ClkTagBar, MODKEY, Button1, tag, { 0 } },
    	{ ClkTagBar, MODKEY, Button3, toggletag, { 0 } },
    };
    
    
]
dotCommand [
    P
]
fileStack [
    test-file.h
]
macroCommand []
previousState [
    #include <X11/XF86keysym.h>
    
    /* See LICENSE file for copyright and license details. */
    
    /* appearance */
    static const unsigned int borderpx = 1; /* border pixel of windows */
    static const unsigned int snap = 32; /* snap pixel */
    static const int showbar = 1; /* 0 means no bar */
    static const int topbar = 1; /* 0 means bottom bar */
    static const char *fonts[] = { "DejaVuSansM Nerd Font:size=16" };
    static const char dmenufont[] = "DejaVuSansM Nerd Font:size=16";
    static const char col_gray1[] = "#222222";
    static const char col_gray2[] = "#444444";
    static const char col_gray3[] = "#bbbbbb";
    static const char col_gray4[] = "#eeeeee";
    static const char col_cyan[] = "#006400";
    static const char *colors[][3] = {
    	/*               fg         bg         border   */
    	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
    	[SchemeSel] = { col_gray4, col_cyan, col_cyan },
    };
    
    /* tagging */
    static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
    
    static const Rule rules[] = {
    	/* xprop(1):
    	 *	WM_CLASS(STRING) = instance, class
    	 *	WM_NAME(STRING) = title
    	 */
    	/* class      instance    title       tags mask     isfloating   monitor */
    	{ "Gimp", NULL, NULL, 0, 1, -1 },
    	{ "Firefox", NULL, NULL, 1 << 8, 0, -1 },
    };
    
    /* layout(s) */
    static const float mfact = 0.55; /* factor of master area size [0.05..0.95] */
    static const int nmaster = 1; /* number of clients in master area */
    static const int resizehints = 1; /* 1 means respect size hints in tiled resizals */
    static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
    
    static const Layout layouts[] = {
    	/* symbol     arrange function */
    	{ "[]=", tile }, /* first entry is default */
    	{ "><>", NULL }, /* no layout function means floating behavior */
    	{ "[M]", monocle },
    };
    
    /* key definitions */
    #define MODKEY Mod4Mask
    #define TAGKEYS(KEY, TAG)                                                                           \
    	{ 0, KEY, view, { .ui = 1 << TAG } }, { ControlMask, KEY, toggleview, { .ui = 1 << TAG } }, \
    		{ ShiftMask, KEY, tag, { .ui = 1 << TAG } },                                        \
    		{ ControlMask | ShiftMask, KEY, toggletag, { .ui = 1 << TAG } },
    
    /* helper for spawning shell commands in the pre dwm-5.0 fashion */
    #define SHCMD(cmd)                                 \
    	{                                          \
    		.v = (const char *[])              \
    		{                                  \
    			"/bin/sh", "-c", cmd, NULL \
    		}                                  \
    	}
    
    /* commands */
    static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
    static const char *dmenucmd[] = { "dmenu_run", "-m",	  dmenumon, "-fn",    dmenufont, "-nb",	    col_gray1,
    				  "-nf",       col_gray3, "-sb",    col_cyan, "-sf",	 col_gray4, NULL };
    static const char *termcmd[] = { "st", NULL };
    
    static const char *inclight[] = { "sudo", "brightnessctl", "set", "10%+", NULL };
    static const char *declight[] = { "sudo", "brightnessctl", "set", "10%-", NULL };
    static const char *mutecmd[] = { "amixer", "-q", "set", "Master", "toggle", NULL };
    static const char *volupcmd[] = { "amixer", "-q", "set", "Master", "10%+", "unmute", NULL };
    static const char *voldowncmd[] = { "amixer", "-q", "set", "Master", "10%-", "unmute", NULL };
    static const char *statusbar[] = { "/bin/statusbar", NULL };
    
    static const Key keys[] = {
    	/* modifier                     key        function        argument */
    	{ ControlMask, XK_space, spawn, { .v = dmenucmd } },
    	{ MODKEY, XK_j, focusstack, { .i = +1 } },
    	{ MODKEY, XK_k, focusstack, { .i = -1 } },
    	{ MODKEY | ShiftMask, XK_c, killclient, { 0 } },
    	{ MODKEY, XK_comma, focusmon, { .i = -1 } },
    	{ MODKEY, XK_period, focusmon, { .i = +1 } },
    	{ MODKEY | ShiftMask, XK_comma, tagmon, { .i = -1 } },
    	{ MODKEY | ShiftMask, XK_period, tagmon, { .i = +1 } },
    	{ MODKEY, XK_i, incnmaster, { .i = +1 } },
    	{ MODKEY, XK_d, incnmaster, { .i = -1 } },
    	{ MODKEY, XK_b, togglebar, { 0 } },
    	{ MODKEY, XK_h, setmfact, { .f = -0.05 } },
    	{ MODKEY, XK_l, setmfact, { .f = +0.05 } },
    	{ 0, XF86XK_AudioMute, spawn, { .v = mutecmd } },
    	{ 0, XF86XK_AudioMute, spawn, { .v = statusbar } },
    	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = voldowncmd } },
    	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = statusbar } },
    	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = volupcmd } },
    	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = statusbar } },
    	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = inclight } },
    	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = statusbar } },
    	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = declight } },
    	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = statusbar } },
    	TAGKEYS(XK_F1, 0) TAGKEYS(XK_F2, 1) TAGKEYS(XK_F3, 2) TAGKEYS(XK_F4, 3) TAGKEYS(XK_F5, 4) TAGKEYS(XK_F6, 5)
    		TAGKEYS(XK_F7, 6) TAGKEYS(XK_F8, 7) TAGKEYS(XK_F9, 8){ MODKEY | ShiftMask, XK_q, quit, { 0 } },
    };
    
    /* button definitions */
    /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
    static const Button buttons[] = {
    	/* click                event mask      button          function        argument */
    	{ ClkLtSymbol, 0, Button1, setlayout, { 0 } },
    	{ ClkLtSymbol, 0, Button3, setlayout, { .v = &layouts[2] } },
    	{ ClkWinTitle, 0, Button2, zoom, { 0 } },
    	{ ClkStatusText, 0, Button2, spawn, { .v = termcmd } },
    	{ ClkClientWin, MODKEY, Button1, movemouse, { 0 } },
    	{ ClkClientWin, MODKEY, Button2, togglefloating, { 0 } },
    	{ ClkClientWin, MODKEY, Button3, resizemouse, { 0 } },
    	{ ClkTagBar, 0, Button1, view, { 0 } },
    	{ ClkTagBar, 0, Button3, toggleview, { 0 } },
    	{ ClkTagBar, MODKEY, Button1, tag, { 0 } },
    	{ ClkTagBar, MODKEY, Button3, toggletag, { 0 } },
    };
    
    
]
history [
    [
        0 -#include <X11/XF86keysym.h>
        2 -/* See LICENSE file for copyright and license details. */
        3 -
        4 -/* appearance */
        5 -static const unsigned int borderpx = 1; /* border pixel of windows */
        6 -static const unsigned int snap = 32; /* snap pixel */
        7 -static const int showbar = 1; /* 0 means no bar */
        8 -static const int topbar = 1; /* 0 means bottom bar */
        9 -static const char *fonts[] = { "DejaVuSansM Nerd Font:size=16" };
        10 -static const char dmenufont[] = "DejaVuSansM Nerd Font:size=16";
        11 -static const char col_gray1[] = "#222222";
        12 -static const char col_gray2[] = "#444444";
        13 -static const char col_gray3[] = "#bbbbbb";
        14 -static const char col_gray4[] = "#eeeeee";
        15 -static const char col_cyan[] = "#006400";
        16 -static const char *colors[][3] = {
        17 -	/*               fg         bg         border   */
        18 -	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
        19 -	[SchemeSel] = { col_gray4, col_cyan, col_cyan },
        20 -};
        21 -
        22 -/* tagging */
        23 -static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
        24 -
        25 -static const Rule rules[] = {
        26 -	/* xprop(1):
        27 -	 *	WM_CLASS(STRING) = instance, class
        28 -	 *	WM_NAME(STRING) = title
        29 -	 */
        30 -	/* class      instance    title       tags mask     isfloating   monitor */
        31 -	{ "Gimp", NULL, NULL, 0, 1, -1 },
        32 -	{ "Firefox", NULL, NULL, 1 << 8, 0, -1 },
        33 -};
        34 -
        35 -/* layout(s) */
        36 -static const float mfact = 0.55; /* factor of master area size [0.05..0.95] */
        37 -static const int nmaster = 1; /* number of clients in master area */
        38 -static const int resizehints = 1; /* 1 means respect size hints in tiled resizals */
        39 -static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
        40 -
        41 -static const Layout layouts[] = {
        42 -	/* symbol     arrange function */
        43 -	{ "[]=", tile }, /* first entry is default */
        44 -	{ "><>", NULL }, /* no layout function means floating behavior */
        45 -	{ "[M]", monocle },
        46 -};
        47 -
        48 -/* key definitions */
        49 -#define MODKEY Mod4Mask
        50 -#define TAGKEYS(KEY, TAG)                                                                           \
        51 -	{ 0, KEY, view, { .ui = 1 << TAG } }, { ControlMask, KEY, toggleview, { .ui = 1 << TAG } }, \
        52 -		{ ShiftMask, KEY, tag, { .ui = 1 << TAG } },                                        \
        53 -		{ ControlMask | ShiftMask, KEY, toggletag, { .ui = 1 << TAG } },
        54 -
        55 -/* helper for spawning shell commands in the pre dwm-5.0 fashion */
        56 -#define SHCMD(cmd)                                 \
        57 -	{                                          \
        58 -		.v = (const char *[])              \
        59 -		{                                  \
        60 -			"/bin/sh", "-c", cmd, NULL \
        61 -		}                                  \
        62 -	}
        63 -
        64 -/* commands */
        65 -static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
        66 -static const char *dmenucmd[] = { "dmenu_run", "-m",	  dmenumon, "-fn",    dmenufont, "-nb",	    col_gray1,
        67 -				  "-nf",       col_gray3, "-sb",    col_cyan, "-sf",	 col_gray4, NULL };
        68 -static const char *termcmd[] = { "st", NULL };
        69 -
        70 -static const char *inclight[] = { "sudo", "brightnessctl", "set", "10%+", NULL };
        71 -static const char *declight[] = { "sudo", "brightnessctl", "set", "10%-", NULL };
        72 -static const char *mutecmd[] = { "amixer", "-q", "set", "Master", "toggle", NULL };
        73 -static const char *volupcmd[] = { "amixer", "-q", "set", "Master", "10%+", "unmute", NULL };
        74 -static const char *voldowncmd[] = { "amixer", "-q", "set", "Master", "10%-", "unmute", NULL };
        75 -static const char *statusbar[] = { "/bin/statusbar", NULL };
        76 -
        77 -static const Key keys[] = {
        78 -	/* modifier                     key        function        argument */
        79 -	{ ControlMask, XK_space, spawn, { .v = dmenucmd } },
        80 -	{ MODKEY, XK_j, focusstack, { .i = +1 } },
        81 -	{ MODKEY, XK_k, focusstack, { .i = -1 } },
        82 -	{ MODKEY | ShiftMask, XK_c, killclient, { 0 } },
        83 -	{ MODKEY, XK_comma, focusmon, { .i = -1 } },
        84 -	{ MODKEY, XK_period, focusmon, { .i = +1 } },
        85 -	{ MODKEY | ShiftMask, XK_comma, tagmon, { .i = -1 } },
        86 -	{ MODKEY | ShiftMask, XK_period, tagmon, { .i = +1 } },
        87 -	{ MODKEY, XK_i, incnmaster, { .i = +1 } },
        88 -	{ MODKEY, XK_d, incnmaster, { .i = -1 } },
        89 -	{ MODKEY, XK_b, togglebar, { 0 } },
        90 -	{ MODKEY, XK_h, setmfact, { .f = -0.05 } },
        91 -	{ MODKEY, XK_l, setmfact, { .f = +0.05 } },
        92 -	{ 0, XF86XK_AudioMute, spawn, { .v = mutecmd } },
        93 -	{ 0, XF86XK_AudioMute, spawn, { .v = statusbar } },
        94 -	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = voldowncmd } },
        95 -	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = statusbar } },
        96 -	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = volupcmd } },
        97 -	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = statusbar } },
        98 -	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = inclight } },
        99 -	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = statusbar } },
        100 -	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = declight } },
        101 -	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = statusbar } },
        102 -	TAGKEYS(XK_F1, 0) TAGKEYS(XK_F2, 1) TAGKEYS(XK_F3, 2) TAGKEYS(XK_F4, 3) TAGKEYS(XK_F5, 4) TAGKEYS(XK_F6, 5)
        103 -		TAGKEYS(XK_F7, 6) TAGKEYS(XK_F8, 7) TAGKEYS(XK_F9, 8){ MODKEY | ShiftMask, XK_q, quit, { 0 } },
        104 -};
        105 -
        106 -/* button definitions */
        107 -/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
        108 -static const Button buttons[] = {
        109 -	/* click                event mask      button          function        argument */
        110 -	{ ClkLtSymbol, 0, Button1, setlayout, { 0 } },
        111 -	{ ClkLtSymbol, 0, Button3, setlayout, { .v = &layouts[2] } },
        112 -	{ ClkWinTitle, 0, Button2, zoom, { 0 } },
        113 -	{ ClkStatusText, 0, Button2, spawn, { .v = termcmd } },
        114 -	{ ClkClientWin, MODKEY, Button1, movemouse, { 0 } },
        115 -	{ ClkClientWin, MODKEY, Button2, togglefloating, { 0 } },
        116 -	{ ClkClientWin, MODKEY, Button3, resizemouse, { 0 } },
        117 -	{ ClkTagBar, 0, Button1, view, { 0 } },
        118 -	{ ClkTagBar, 0, Button3, toggleview, { 0 } },
        119 -	{ ClkTagBar, MODKEY, Button1, tag, { 0 } },
        120 -	{ ClkTagBar, MODKEY, Button3, toggletag, { 0 } },
        121 -};
        122 -
    ]
    [
        0 +#include <X11/XF86keysym.h>
        2 +/* See LICENSE file for copyright and license details. */
        3 +
        4 +/* appearance */
        5 +static const unsigned int borderpx = 1; /* border pixel of windows */
        6 +static const unsigned int snap = 32; /* snap pixel */
        7 +static const int showbar = 1; /* 0 means no bar */
        8 +static const int topbar = 1; /* 0 means bottom bar */
        9 +static const char *fonts[] = { "DejaVuSansM Nerd Font:size=16" };
        10 +static const char dmenufont[] = "DejaVuSansM Nerd Font:size=16";
        11 +static const char col_gray1[] = "#222222";
        12 +static const char col_gray2[] = "#444444";
        13 +static const char col_gray3[] = "#bbbbbb";
        14 +static const char col_gray4[] = "#eeeeee";
        15 +static const char col_cyan[] = "#006400";
        16 +static const char *colors[][3] = {
        17 +	/*               fg         bg         border   */
        18 +	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
        19 +	[SchemeSel] = { col_gray4, col_cyan, col_cyan },
        20 +};
        21 +
        22 +/* tagging */
        23 +static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
        24 +
        25 +static const Rule rules[] = {
        26 +	/* xprop(1):
        27 +	 *	WM_CLASS(STRING) = instance, class
        28 +	 *	WM_NAME(STRING) = title
        29 +	 */
        30 +	/* class      instance    title       tags mask     isfloating   monitor */
        31 +	{ "Gimp", NULL, NULL, 0, 1, -1 },
        32 +	{ "Firefox", NULL, NULL, 1 << 8, 0, -1 },
        33 +};
        34 +
        35 +/* layout(s) */
        36 +static const float mfact = 0.55; /* factor of master area size [0.05..0.95] */
        37 +static const int nmaster = 1; /* number of clients in master area */
        38 +static const int resizehints = 1; /* 1 means respect size hints in tiled resizals */
        39 +static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
        40 +
        41 +static const Layout layouts[] = {
        42 +	/* symbol     arrange function */
        43 +	{ "[]=", tile }, /* first entry is default */
        44 +	{ "><>", NULL }, /* no layout function means floating behavior */
        45 +	{ "[M]", monocle },
        46 +};
        47 +
        48 +/* key definitions */
        49 +#define MODKEY Mod4Mask
        50 +#define TAGKEYS(KEY, TAG)                                                                           \
        51 +	{ 0, KEY, view, { .ui = 1 << TAG } }, { ControlMask, KEY, toggleview, { .ui = 1 << TAG } }, \
        52 +		{ ShiftMask, KEY, tag, { .ui = 1 << TAG } },                                        \
        53 +		{ ControlMask | ShiftMask, KEY, toggletag, { .ui = 1 << TAG } },
        54 +
        55 +/* helper for spawning shell commands in the pre dwm-5.0 fashion */
        56 +#define SHCMD(cmd)                                 \
        57 +	{                                          \
        58 +		.v = (const char *[])              \
        59 +		{                                  \
        60 +			"/bin/sh", "-c", cmd, NULL \
        61 +		}                                  \
        62 +	}
        63 +
        64 +/* commands */
        65 +static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
        66 +static const char *dmenucmd[] = { "dmenu_run", "-m",	  dmenumon, "-fn",    dmenufont, "-nb",	    col_gray1,
        67 +				  "-nf",       col_gray3, "-sb",    col_cyan, "-sf",	 col_gray4, NULL };
        68 +static const char *termcmd[] = { "st", NULL };
        69 +
        70 +static const char *inclight[] = { "sudo", "brightnessctl", "set", "10%+", NULL };
        71 +static const char *declight[] = { "sudo", "brightnessctl", "set", "10%-", NULL };
        72 +static const char *mutecmd[] = { "amixer", "-q", "set", "Master", "toggle", NULL };
        73 +static const char *volupcmd[] = { "amixer", "-q", "set", "Master", "10%+", "unmute", NULL };
        74 +static const char *voldowncmd[] = { "amixer", "-q", "set", "Master", "10%-", "unmute", NULL };
        75 +static const char *statusbar[] = { "/bin/statusbar", NULL };
        76 +
        77 +static const Key keys[] = {
        78 +	/* modifier                     key        function        argument */
        79 +	{ ControlMask, XK_space, spawn, { .v = dmenucmd } },
        80 +	{ MODKEY, XK_j, focusstack, { .i = +1 } },
        81 +	{ MODKEY, XK_k, focusstack, { .i = -1 } },
        82 +	{ MODKEY | ShiftMask, XK_c, killclient, { 0 } },
        83 +	{ MODKEY, XK_comma, focusmon, { .i = -1 } },
        84 +	{ MODKEY, XK_period, focusmon, { .i = +1 } },
        85 +	{ MODKEY | ShiftMask, XK_comma, tagmon, { .i = -1 } },
        86 +	{ MODKEY | ShiftMask, XK_period, tagmon, { .i = +1 } },
        87 +	{ MODKEY, XK_i, incnmaster, { .i = +1 } },
        88 +	{ MODKEY, XK_d, incnmaster, { .i = -1 } },
        89 +	{ MODKEY, XK_b, togglebar, { 0 } },
        90 +	{ MODKEY, XK_h, setmfact, { .f = -0.05 } },
        91 +	{ MODKEY, XK_l, setmfact, { .f = +0.05 } },
        92 +	{ 0, XF86XK_AudioMute, spawn, { .v = mutecmd } },
        93 +	{ 0, XF86XK_AudioMute, spawn, { .v = statusbar } },
        94 +	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = voldowncmd } },
        95 +	{ 0, XF86XK_AudioLowerVolume, spawn, { .v = statusbar } },
        96 +	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = volupcmd } },
        97 +	{ 0, XF86XK_AudioRaiseVolume, spawn, { .v = statusbar } },
        98 +	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = inclight } },
        99 +	{ 0, XF86XK_MonBrightnessUp, spawn, { .v = statusbar } },
        100 +	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = declight } },
        101 +	{ 0, XF86XK_MonBrightnessDown, spawn, { .v = statusbar } },
        102 +	TAGKEYS(XK_F1, 0) TAGKEYS(XK_F2, 1) TAGKEYS(XK_F3, 2) TAGKEYS(XK_F4, 3) TAGKEYS(XK_F5, 4) TAGKEYS(XK_F6, 5)
        103 +		TAGKEYS(XK_F7, 6) TAGKEYS(XK_F8, 7) TAGKEYS(XK_F9, 8){ MODKEY | ShiftMask, XK_q, quit, { 0 } },
        104 +};
        105 +
        106 +/* button definitions */
        107 +/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
        108 +static const Button buttons[] = {
        109 +	/* click                event mask      button          function        argument */
        110 +	{ ClkLtSymbol, 0, Button1, setlayout, { 0 } },
        111 +	{ ClkLtSymbol, 0, Button3, setlayout, { .v = &layouts[2] } },
        112 +	{ ClkWinTitle, 0, Button2, zoom, { 0 } },
        113 +	{ ClkStatusText, 0, Button2, spawn, { .v = termcmd } },
        114 +	{ ClkClientWin, MODKEY, Button1, movemouse, { 0 } },
        115 +	{ ClkClientWin, MODKEY, Button2, togglefloating, { 0 } },
        116 +	{ ClkClientWin, MODKEY, Button3, resizemouse, { 0 } },
        117 +	{ ClkTagBar, 0, Button1, view, { 0 } },
        118 +	{ ClkTagBar, 0, Button3, toggleview, { 0 } },
        119 +	{ ClkTagBar, MODKEY, Button1, tag, { 0 } },
        120 +	{ ClkTagBar, MODKEY, Button3, toggletag, { 0 } },
        121 +};
        122 +
        123 +
    ]
]
visual.row 122
visual.col 0
windowPosition.row 0
windowPosition.col 0
col 0
fileExplorerSize 40
fileStackIndex 0
harpoonIndex 0
lineNumSize 5
row 0
