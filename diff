diff --git a/src/keybinds/sendShortcutKeys.cpp b/src/keybinds/sendShortcutKeys.cpp
index 056265b..abfcc7b 100644
--- a/src/keybinds/sendShortcutKeys.cpp
+++ b/src/keybinds/sendShortcutKeys.cpp
@@ -65,6 +65,7 @@ void sendShortcutKeys(State *state, int32_t c)
 		if (c == 'i' || c == 'a' || c == 'f' || c == 't') {
 			state->prevKeys += c;
 		} else {
+			bool specialWOrLOnlyCase = state->prevKeys.length() == 1 && (c == 'w' || c == 'l');
 			uint32_t tempRow = state->row;
 			uint32_t tempCol = state->col;
 			char command = state->prevKeys[0];
@@ -84,6 +85,9 @@ void sendShortcutKeys(State *state, int32_t c)
 				state->motion[0] = 'V';
 			}
 			if (success) {
+				if (specialWOrLOnlyCase) {
+					sendVisualKeys(state, 'h', true);
+				}
 				sendVisualKeys(state, command, false);
 			} else {
 				state->prevKeys = "";
@@ -311,6 +315,7 @@ void sendShortcutKeys(State *state, int32_t c)
 			sendKeys(state, getUnEscapedChar(state->macroCommand[i]));
 			cleanup(state, c);
 		}
+		centerScreen(state);
 		state->dontRecordKey = true;
 	} else if (c == 'q') {
 		if (!state->recording) {
@@ -354,6 +359,7 @@ void sendShortcutKeys(State *state, int32_t c)
 		getAndAddNumber(state, state->row, state->col, 1);
 	} else if (c == 's') {
 		if (state->col < state->data[state->row].length()) {
+			copyToClipboard(state->data[state->row].substr(state->col, 1));
 			state->data[state->row] = state->data[state->row].substr(0, state->col) +
 						  state->data[state->row].substr(state->col + 1);
 			state->mode = TYPING;
diff --git a/src/util/helper.h b/src/util/helper.h
index 10b660c..2adf9ea 100644
--- a/src/util/helper.h
+++ b/src/util/helper.h
@@ -8,6 +8,7 @@
 #include <vector>
 
 bool isColTooSmall(State *state);
+bool isWhitespace(char c);
 bool isColTooBig(State *state);
 uint32_t getDisplayCol(State *state);
 uint32_t getDisplayLength(State *state, std::string s);
diff --git a/src/util/render.cpp b/src/util/render.cpp
index 044f317..1ac043f 100644
--- a/src/util/render.cpp
+++ b/src/util/render.cpp
@@ -256,7 +256,15 @@ int32_t renderStatusBar(State *state)
 			}
 		}
 		insertPixels(state, &pixels, ' ', WHITE);
-		insertPixels(state, &pixels, setStringToLength(state->keys, 15, false), state->recording ? RED : WHITE);
+		if (state->recording) {
+			std::string s;
+			for (uint32_t i = 0; i < state->macroCommand.size(); i++) {
+				s += state->macroCommand[i];
+			}
+			insertPixels(state, &pixels, setStringToLength(s, 60, true), RED);
+		} else {
+			insertPixels(state, &pixels, setStringToLength(state->keys, 15, false), WHITE);
+		}
 		insertPixels(state, &pixels, ' ', WHITE);
 		prefix = "/";
 		std::string displayQuery = state->search.query;
@@ -468,7 +476,7 @@ int32_t getLineNumberColor(State *state, int32_t row)
 int32_t getMarkColor(State *state, int32_t row)
 {
 	bool logging = std::regex_search(state->data[row], std::regex(getLoggingRegex(state)));
-	bool endsWithSpace = state->data[row].back() == ' ';
+	bool endsWithSpace = isWhitespace(state->data[row].back());
 	bool isOnMark = (int32_t)state->mark.mark == row && state->mark.filename == state->filename;
 	if (endsWithSpace && state->mode != TYPING) {
 		return RED;
diff --git a/src/util/state.cpp b/src/util/state.cpp
index bb901b2..74f605d 100644
--- a/src/util/state.cpp
+++ b/src/util/state.cpp
@@ -154,6 +154,7 @@ void State::changeFile(std::string filename)
 	this->commentSymbol = getCommentSymbol(normalizedFilename);
 	this->history = std::vector<std::vector<diffLine> >();
 	this->historyPosition = -1;
+	this->lastSave = -1;
 	this->windowPosition.row = 0;
 	this->windowPosition.col = 0;
 	this->visualType = NORMAL;
diff --git a/tasks.md b/tasks.md
index 90c0090..b1eabf9 100644
--- a/tasks.md
+++ b/tasks.md
@@ -1,13 +1,10 @@
 ## tasks
-- fix issue with going up not saving col (tabs counting as 1)
+- fix issue with going up not saving col (tabs counting as 1 instead of 8)
 - better replace all (interactive mode and better command mode)
 - highlight entire tab
 - retab auto-detect indentation
 - make gs///g respect ignoreFiles
-- make s copy
-- make dw work correctly
 - make b work with "../"
-- make dotCommand and macroCommand store vector
 - fileExplorer issues
 - fix tab rendering with non wordwrap state->windowPosition.col > 0
 - lock down changing files flag
@@ -24,7 +21,6 @@
   -h
 - add gitlab and local server as mirror
 - fix editorconfig filename parser
-- put asserts everywhere (make sure state is perfect and i never mess up)
 - fix diff function for huge files (look at vim, rope, other stuff)
   - futures api probably bad, use <pthread> semaphores and locks
   - do this with tests!!
