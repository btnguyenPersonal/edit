diff --git a/src/edit.cpp b/src/edit.cpp
index bb25d0d..6e1b965 100644
--- a/src/edit.cpp
+++ b/src/edit.cpp
@@ -2,9 +2,10 @@
 #include "util/helper.h"
 #include "util/render.h"
 #include "util/state.h"
+#include <cstdint>
 
-int main(int argc, char* argv[]) {
-    int c;
+int32_t main(int32_t argc, char* argv[]) {
+    int32_t c;
     State* state;
     std::string filename;
     if (argc == 2) {
diff --git a/src/keybinds/sendBlameKeys.cpp b/src/keybinds/sendBlameKeys.cpp
index 24e2612..3bab3c9 100644
--- a/src/keybinds/sendBlameKeys.cpp
+++ b/src/keybinds/sendBlameKeys.cpp
@@ -6,7 +6,7 @@
 #include <string>
 #include <vector>
 
-void sendBlameKeys(State* state, int c) {
+void sendBlameKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
         state->mode = SHORTCUTS;
     } else if (c == 'k') {
diff --git a/src/keybinds/sendBlameKeys.h b/src/keybinds/sendBlameKeys.h
index 85cb2b4..a694a7c 100644
--- a/src/keybinds/sendBlameKeys.h
+++ b/src/keybinds/sendBlameKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendBlameKeys(State* state, int c);
+void sendBlameKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendCommandLineKeys.cpp b/src/keybinds/sendCommandLineKeys.cpp
index afec2dd..2aaa364 100644
--- a/src/keybinds/sendCommandLineKeys.cpp
+++ b/src/keybinds/sendCommandLineKeys.cpp
@@ -55,7 +55,7 @@ void evaluateCommandLineQuery(State* state) {
             std::getline(iss, s, ';');
         } while (!iss.eof());
     } else if (is_number(state->commandLine.query)) {
-        unsigned int number = stoul(state->commandLine.query);
+        uint32_t number = stoul(state->commandLine.query);
         if (number > 0) {
             state->row = number - 1;
         } else {
@@ -64,7 +64,7 @@ void evaluateCommandLineQuery(State* state) {
     }
 }
 
-void sendCommandLineKeys(State* state, int c) {
+void sendCommandLineKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
         backspaceAll(&state->commandLine);
         state->mode = SHORTCUTS;
diff --git a/src/keybinds/sendCommandLineKeys.h b/src/keybinds/sendCommandLineKeys.h
index 4a12516..85d3309 100644
--- a/src/keybinds/sendCommandLineKeys.h
+++ b/src/keybinds/sendCommandLineKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendCommandLineKeys(State* state, int c);
+void sendCommandLineKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendFileExplorerKeys.cpp b/src/keybinds/sendFileExplorerKeys.cpp
index 1d1d1ca..f03a080 100644
--- a/src/keybinds/sendFileExplorerKeys.cpp
+++ b/src/keybinds/sendFileExplorerKeys.cpp
@@ -9,7 +9,7 @@
 #include <string>
 #include <vector>
 
-void sendFileExplorerKeys(State* state, int c) {
+void sendFileExplorerKeys(State* state, int32_t c) {
     try {
         if (c == 27) { // ESC
             state->mode = SHORTCUTS;
@@ -90,7 +90,7 @@ void sendFileExplorerKeys(State* state, int c) {
             auto node = FileExplorerNode::getFileExplorerNode(state->fileExplorer, state->fileExplorerIndex);
             copyFileToClipboard(state, node->path.string());
         } else if (c == ctrl('u')) {
-            for (unsigned int i = 0; i < state->maxY / 2; i++) {
+            for (uint32_t i = 0; i < state->maxY / 2; i++) {
                 if (state->fileExplorerIndex > 0) {
                     state->fileExplorerIndex--;
                 }
@@ -100,7 +100,7 @@ void sendFileExplorerKeys(State* state, int c) {
                 state->fileExplorerIndex--;
             }
         } else if (c == ctrl('d')) {
-            for (unsigned int i = 0; i < state->maxY / 2; i++) {
+            for (uint32_t i = 0; i < state->maxY / 2; i++) {
                 if (state->fileExplorerIndex + 1 < state->fileExplorer->getTotalChildren()) {
                     state->fileExplorerIndex++;
                 }
diff --git a/src/keybinds/sendFileExplorerKeys.h b/src/keybinds/sendFileExplorerKeys.h
index 92f645a..69316d6 100644
--- a/src/keybinds/sendFileExplorerKeys.h
+++ b/src/keybinds/sendFileExplorerKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendFileExplorerKeys(State* state, int c);
+void sendFileExplorerKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendFindFileKeys.cpp b/src/keybinds/sendFindFileKeys.cpp
index 7dab404..f43e2d4 100644
--- a/src/keybinds/sendFindFileKeys.cpp
+++ b/src/keybinds/sendFindFileKeys.cpp
@@ -9,7 +9,7 @@
 #include <string>
 #include <vector>
 
-void sendFindFileKeys(State* state, int c) {
+void sendFindFileKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
         state->selectAll = false;
         state->mode = SHORTCUTS;
@@ -43,13 +43,13 @@ void sendFindFileKeys(State* state, int c) {
         backspaceAll(&state->findFile);
         state->findFile.selection = 0;
     } else if (c == ctrl('d')) {
-        for (unsigned int i = 0; i < state->maxY; i++) {
+        for (uint32_t i = 0; i < state->maxY; i++) {
             if (state->findFile.selection + 1 < state->findFileOutput.size()) {
                 state->findFile.selection += 1;
             }
         }
     } else if (c == ctrl('u')) {
-        for (unsigned int i = 0; i < state->maxY; i++) {
+        for (uint32_t i = 0; i < state->maxY; i++) {
             if (state->findFile.selection > 0) {
                 state->findFile.selection -= 1;
             }
@@ -88,7 +88,7 @@ void sendFindFileKeys(State* state, int c) {
     } else if (c == ctrl('w')) {
         state->findFile.selection = 0;
     } else if (c == ctrl('e')) {
-        for (unsigned int i = 0; i < state->findFileOutput.size(); i++) {
+        for (uint32_t i = 0; i < state->findFileOutput.size(); i++) {
             if (state->findFile.selection + 1 < state->findFileOutput.size()) {
                 state->findFile.selection += 1;
             }
diff --git a/src/keybinds/sendFindFileKeys.h b/src/keybinds/sendFindFileKeys.h
index c5a82c0..0b169fe 100644
--- a/src/keybinds/sendFindFileKeys.h
+++ b/src/keybinds/sendFindFileKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendFindFileKeys(State* state, int c);
+void sendFindFileKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendGrepKeys.cpp b/src/keybinds/sendGrepKeys.cpp
index 7baeff0..29102e4 100644
--- a/src/keybinds/sendGrepKeys.cpp
+++ b/src/keybinds/sendGrepKeys.cpp
@@ -9,7 +9,7 @@
 #include <string>
 #include <vector>
 
-void sendGrepKeys(State* state, int c) {
+void sendGrepKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
         state->mode = SHORTCUTS;
     } else if (' ' <= c && c <= '~') {
@@ -27,13 +27,13 @@ void sendGrepKeys(State* state, int c) {
     } else if (c == ctrl('l')) {
         backspaceAll(&state->grep);
     } else if (c == ctrl('d')) {
-        for (unsigned int i = 0; i < state->maxY; i++) {
+        for (uint32_t i = 0; i < state->maxY; i++) {
             if (state->grep.selection + 1 < state->grepOutput.size()) {
                 state->grep.selection += 1;
             }
         }
     } else if (c == ctrl('u')) {
-        for (unsigned int i = 0; i < state->maxY; i++) {
+        for (uint32_t i = 0; i < state->maxY; i++) {
             if (state->grep.selection > 0) {
                 state->grep.selection -= 1;
             }
@@ -65,7 +65,7 @@ void sendGrepKeys(State* state, int c) {
     } else if (c == ctrl('w')) {
         state->grep.selection = 0;
     } else if (c == ctrl('e')) {
-        for (unsigned int i = 0; i < state->grepOutput.size(); i++) {
+        for (uint32_t i = 0; i < state->grepOutput.size(); i++) {
             if (state->grep.selection + 1 < state->grepOutput.size()) {
                 state->grep.selection += 1;
             }
diff --git a/src/keybinds/sendGrepKeys.h b/src/keybinds/sendGrepKeys.h
index e571764..c036fc8 100644
--- a/src/keybinds/sendGrepKeys.h
+++ b/src/keybinds/sendGrepKeys.h
@@ -6,4 +6,4 @@
 #include <string>
 #include <vector>
 
-void sendGrepKeys(State* state, int c);
\ No newline at end of file
+void sendGrepKeys(State* state, int32_t c);
\ No newline at end of file
diff --git a/src/keybinds/sendKeys.cpp b/src/keybinds/sendKeys.cpp
index a6a80be..3fdf151 100644
--- a/src/keybinds/sendKeys.cpp
+++ b/src/keybinds/sendKeys.cpp
@@ -15,7 +15,7 @@
 #include "sendVisualKeys.h"
 #include <ncurses.h>
 
-void sendKeys(State* state, int c) {
+void sendKeys(State* state, int32_t c) {
     state->showGrep = false;
     state->status = std::string("");
     if (!state->autosave) {
@@ -69,11 +69,11 @@ void sendKeys(State* state, int c) {
                 }
                 state->previousState = state->data;
                 if (c != ctrl('r') && c != 'u') {
-                    if (state->historyPosition < (int)state->history.size()) {
+                    if (state->historyPosition < (int32_t)state->history.size()) {
                         state->history.erase(state->history.begin() + state->historyPosition + 1, state->history.end());
                     }
                     state->history.push_back(diff);
-                    state->historyPosition = (int)state->history.size() - 1;
+                    state->historyPosition = (int32_t)state->history.size() - 1;
                 }
             }
         }
@@ -91,7 +91,7 @@ void sendKeys(State* state, int c) {
                 state->jumplist.index = state->jumplist.list.size() - 1;
             }
         }
-        for (unsigned int i = 0; i < state->harpoonFiles.size(); i++) {
+        for (uint32_t i = 0; i < state->harpoonFiles.size(); i++) {
             if (state->harpoonFiles[i] == state->filename) {
                 state->harpoonIndex = i;
             }
diff --git a/src/keybinds/sendKeys.h b/src/keybinds/sendKeys.h
index b198840..580e730 100644
--- a/src/keybinds/sendKeys.h
+++ b/src/keybinds/sendKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendKeys(State* state, int c);
\ No newline at end of file
+void sendKeys(State* state, int32_t c);
\ No newline at end of file
diff --git a/src/keybinds/sendMultiCursorKeys.cpp b/src/keybinds/sendMultiCursorKeys.cpp
index bd4e8e3..8d78440 100644
--- a/src/keybinds/sendMultiCursorKeys.cpp
+++ b/src/keybinds/sendMultiCursorKeys.cpp
@@ -8,7 +8,7 @@
 #include <string>
 #include <vector>
 
-void sendMultiCursorKeys(State* state, int c) {
+void sendMultiCursorKeys(State* state, int32_t c) {
     if (!state->dontRecordKey) {
         state->motion += c;
     }
@@ -21,20 +21,20 @@ void sendMultiCursorKeys(State* state, int c) {
         return;
     } else if (c == KEY_BACKSPACE || c == 127) {
         if (state->col > 0) {
-            for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+            for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
                 std::string current = state->data[i];
                 state->data[i] = current.substr(0, state->col - 1) + safeSubstring(current, state->col);
             }
             state->col -= 1;
         }
     } else if (' ' <= c && c <= '~') {
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             std::string current = state->data[i];
             state->data[i] = current.substr(0, state->col) + (char)c + safeSubstring(current, state->col);
         }
         state->col += 1;
     } else if (c == ctrl('t')) {
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             std::string current = state->data[i];
             state->data[i] = current.substr(0, state->col) + '\t' + safeSubstring(current, state->col);
         }
@@ -42,7 +42,7 @@ void sendMultiCursorKeys(State* state, int c) {
     } else if (c == ctrl('i')) { // TAB
         std::string completion = autocomplete(state, getCurrentWord(state));
         if (state->data[state->row].substr(state->col, completion.length()) != completion) {
-            for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+            for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
                 std::string current = state->data[i];
                 state->data[i] = current.substr(0, state->col) + completion + safeSubstring(current, state->col);
             }
diff --git a/src/keybinds/sendMultiCursorKeys.h b/src/keybinds/sendMultiCursorKeys.h
index 5d607b5..206acf3 100644
--- a/src/keybinds/sendMultiCursorKeys.h
+++ b/src/keybinds/sendMultiCursorKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendMultiCursorKeys(State* state, int c);
+void sendMultiCursorKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendSearchKeys.cpp b/src/keybinds/sendSearchKeys.cpp
index d002c26..bc804bb 100644
--- a/src/keybinds/sendSearchKeys.cpp
+++ b/src/keybinds/sendSearchKeys.cpp
@@ -7,7 +7,7 @@
 #include <climits>
 #include <ncurses.h>
 
-void sendSearchKeys(State* state, int c) {
+void sendSearchKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
         state->replacing = false;
         state->mode = SHORTCUTS;
diff --git a/src/keybinds/sendSearchKeys.h b/src/keybinds/sendSearchKeys.h
index 4c66f79..13f085c 100644
--- a/src/keybinds/sendSearchKeys.h
+++ b/src/keybinds/sendSearchKeys.h
@@ -3,4 +3,4 @@
 #include "../util/helper.h"
 #include "../util/state.h"
 
-void sendSearchKeys(State* state, int c);
\ No newline at end of file
+void sendSearchKeys(State* state, int32_t c);
\ No newline at end of file
diff --git a/src/keybinds/sendShortcutKeys.cpp b/src/keybinds/sendShortcutKeys.cpp
index cd28f63..028e03a 100644
--- a/src/keybinds/sendShortcutKeys.cpp
+++ b/src/keybinds/sendShortcutKeys.cpp
@@ -10,6 +10,7 @@
 #include "../util/query.h"
 #include "../util/state.h"
 #include "../util/visualType.h"
+#include "../util/customAssert.h"
 #include "sendKeys.h"
 #include "sendVisualKeys.h"
 #include <algorithm>
@@ -18,8 +19,9 @@
 #include <string>
 #include <vector>
 
-void sendShortcutKeys(State* state, int c) {
+void sendShortcutKeys(State* state, int32_t c) {
     if (c == 27) { // ESC
+        CUSTOM_ASSERT(false && "testing this function");
         state->prevKeys = "";
         state->motion = "";
     } else if (state->prevKeys == "t") {
@@ -35,8 +37,8 @@ void sendShortcutKeys(State* state, int c) {
         state->dotCommand = "r" + c;
         state->prevKeys = "";
     } else if ((state->prevKeys[0] == 'y' || state->prevKeys[0] == 'd' || state->prevKeys[0] == 'c') && state->prevKeys.length() == 2) {
-        unsigned int tempRow = state->row;
-        unsigned int tempCol = state->col;
+        uint32_t tempRow = state->row;
+        uint32_t tempCol = state->col;
         char command0 = state->prevKeys[0];
         char command1 = state->prevKeys[1];
         state->prevKeys = "";
@@ -58,8 +60,8 @@ void sendShortcutKeys(State* state, int c) {
         if (c == 'i' || c == 'a' || c == 'f' || c == 't') {
             state->prevKeys += c;
         } else {
-            unsigned int tempRow = state->row;
-            unsigned int tempCol = state->col;
+            uint32_t tempRow = state->row;
+            uint32_t tempCol = state->col;
             char command = state->prevKeys[0];
             state->prevKeys = "";
             state->motion = "v";
@@ -134,7 +136,7 @@ void sendShortcutKeys(State* state, int c) {
             state->historyPosition--;
         }
     } else if (!state->recording && c == ctrl('r')) {
-        if (state->historyPosition < ((int)state->history.size()) - 1) {
+        if (state->historyPosition < ((int32_t)state->history.size()) - 1) {
             state->row = applyDiff(state, state->history[state->historyPosition + 1], false);
             state->historyPosition++;
         }
@@ -195,8 +197,8 @@ void sendShortcutKeys(State* state, int c) {
         setQuery(&state->search, getInVisual(state));
         state->searching = true;
         state->col += 1;
-        unsigned int temp_col = state->col;
-        unsigned int temp_row = state->row;
+        uint32_t temp_col = state->col;
+        uint32_t temp_row = state->row;
         bool result = setSearchResult(state);
         if (result == false) {
             state->row = temp_row;
@@ -276,8 +278,8 @@ void sendShortcutKeys(State* state, int c) {
     } else if (c == 'n') {
         state->searching = true;
         state->col += 1;
-        unsigned int temp_col = state->col;
-        unsigned int temp_row = state->row;
+        uint32_t temp_col = state->col;
+        uint32_t temp_row = state->row;
         bool result = setSearchResult(state);
         if (result == false) {
             state->searchFail = true;
@@ -287,14 +289,14 @@ void sendShortcutKeys(State* state, int c) {
         centerScreen(state);
     } else if (c == '.') {
         resetValidCursorState(state);
-        for (unsigned int i = 0; i < state->dotCommand.length(); i++) {
+        for (uint32_t i = 0; i < state->dotCommand.length(); i++) {
             state->dontRecordKey = true;
             sendKeys(state, state->dotCommand[i]);
         }
         state->dontRecordKey = true;
     } else if (c == ',' && state->recording == false) {
         resetValidCursorState(state);
-        for (unsigned int i = 0; i < state->macroCommand.length(); i++) {
+        for (uint32_t i = 0; i < state->macroCommand.length(); i++) {
             state->dontRecordKey = true;
             sendKeys(state, state->macroCommand[i]);
         }
diff --git a/src/keybinds/sendShortcutKeys.h b/src/keybinds/sendShortcutKeys.h
index 5bf4b57..b8b4e36 100644
--- a/src/keybinds/sendShortcutKeys.h
+++ b/src/keybinds/sendShortcutKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendShortcutKeys(State* state, int c);
+void sendShortcutKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendTypingKeys.cpp b/src/keybinds/sendTypingKeys.cpp
index bbd0452..b3a7349 100644
--- a/src/keybinds/sendTypingKeys.cpp
+++ b/src/keybinds/sendTypingKeys.cpp
@@ -13,7 +13,7 @@ void insertNewline(State* state) {
     state->data.insert(state->data.begin() + state->row + 1, current.substr(state->col));
 }
 
-void sendTypingKeys(State* state, int c) {
+void sendTypingKeys(State* state, int32_t c) {
     if (!state->dontRecordKey) {
         state->motion += c;
     }
@@ -33,7 +33,7 @@ void sendTypingKeys(State* state, int c) {
         } else {
             std::string current = state->data[state->row];
             state->data[state->row] = current.substr(0, state->col) + (char)c + current.substr(state->col);
-            if ((int)state->col == getIndexFirstNonSpace(state)) {
+            if ((int32_t)state->col == getIndexFirstNonSpace(state)) {
                 indentLine(state);
                 state->col = getIndexFirstNonSpace(state);
             }
@@ -56,13 +56,13 @@ void sendTypingKeys(State* state, int c) {
         }
     } else if (c == ctrl('w')) {
         std::string current = state->data[state->row];
-        unsigned int index = b(state);
+        uint32_t index = b(state);
         state->data[state->row] = current.substr(0, index) + current.substr(state->col);
         state->col = index;
     } else if (' ' <= c && c <= '~') {
         std::string current = state->data[state->row];
         state->data[state->row] = current.substr(0, state->col) + (char)c + current.substr(state->col);
-        if ((int)state->col == getIndexFirstNonSpace(state)) {
+        if ((int32_t)state->col == getIndexFirstNonSpace(state)) {
             indentLine(state);
             state->col = getIndexFirstNonSpace(state);
         }
diff --git a/src/keybinds/sendTypingKeys.h b/src/keybinds/sendTypingKeys.h
index 4b66775..bc314b1 100644
--- a/src/keybinds/sendTypingKeys.h
+++ b/src/keybinds/sendTypingKeys.h
@@ -2,4 +2,4 @@
 
 #include "../util/state.h"
 
-void sendTypingKeys(State* state, int c);
+void sendTypingKeys(State* state, int32_t c);
diff --git a/src/keybinds/sendVisualKeys.cpp b/src/keybinds/sendVisualKeys.cpp
index 2fb7d23..21343b4 100644
--- a/src/keybinds/sendVisualKeys.cpp
+++ b/src/keybinds/sendVisualKeys.cpp
@@ -34,11 +34,11 @@ Bounds getBounds(State* state) {
     return bounds;
 }
 
-void replaceAllWithChar(State* state, int c) {
+void replaceAllWithChar(State* state, int32_t c) {
     Bounds bounds = getBounds(state);
     if (state->visualType == NORMAL) {
-        unsigned int col = bounds.minC;
-        for (unsigned int row = bounds.minR; row < bounds.maxR; row++) {
+        uint32_t col = bounds.minC;
+        for (uint32_t row = bounds.minR; row < bounds.maxR; row++) {
             while (col < state->data[row].size()) {
                 state->data[row][col] = c;
                 col++;
@@ -50,18 +50,18 @@ void replaceAllWithChar(State* state, int c) {
             col++;
         }
     } else if (state->visualType == BLOCK) {
-        unsigned int min = std::min(bounds.minC, bounds.maxC);
-        unsigned int max = std::max(bounds.minC, bounds.maxC);
-        for (unsigned int row = bounds.minR; row <= bounds.maxR; row++) {
-            for (unsigned int col = min; col <= max; col++) {
+        uint32_t min = std::min(bounds.minC, bounds.maxC);
+        uint32_t max = std::max(bounds.minC, bounds.maxC);
+        for (uint32_t row = bounds.minR; row <= bounds.maxR; row++) {
+            for (uint32_t col = min; col <= max; col++) {
                 if (col < state->data[row].size()) {
                     state->data[row][col] = c;
                 }
             }
         }
     } else if (state->visualType == LINE) {
-        for (unsigned int row = bounds.minR; row <= bounds.maxR; row++) {
-            for (unsigned int col = 0; col < state->data[row].size(); col++) {
+        for (uint32_t row = bounds.minR; row <= bounds.maxR; row++) {
+            for (uint32_t col = 0; col < state->data[row].size(); col++) {
                 state->data[row][col] = c;
             }
         }
@@ -71,8 +71,8 @@ void replaceAllWithChar(State* state, int c) {
 void changeCaseVisual(State* state, bool upper) {
     Bounds bounds = getBounds(state);
     if (state->visualType == NORMAL) {
-        unsigned int col = bounds.minC;
-        for (unsigned int row = bounds.minR; row < bounds.maxR; row++) {
+        uint32_t col = bounds.minC;
+        for (uint32_t row = bounds.minR; row < bounds.maxR; row++) {
             while (col < state->data[row].size()) {
                 if (upper) {
                     state->data[row][col] = std::toupper(state->data[row][col]);
@@ -92,10 +92,10 @@ void changeCaseVisual(State* state, bool upper) {
             col++;
         }
     } else if (state->visualType == BLOCK) {
-        unsigned int min = std::min(bounds.minC, bounds.maxC);
-        unsigned int max = std::max(bounds.minC, bounds.maxC);
-        for (unsigned int row = bounds.minR; row <= bounds.maxR; row++) {
-            for (unsigned int col = min; col <= max; col++) {
+        uint32_t min = std::min(bounds.minC, bounds.maxC);
+        uint32_t max = std::max(bounds.minC, bounds.maxC);
+        for (uint32_t row = bounds.minR; row <= bounds.maxR; row++) {
+            for (uint32_t col = min; col <= max; col++) {
                 if (upper) {
                     state->data[row][col] = std::toupper(state->data[row][col]);
                 } else {
@@ -104,8 +104,8 @@ void changeCaseVisual(State* state, bool upper) {
             }
         }
     } else if (state->visualType == LINE) {
-        for (unsigned int row = bounds.minR; row <= bounds.maxR; row++) {
-            for (unsigned int col = 0; col < state->data[row].size(); col++) {
+        for (uint32_t row = bounds.minR; row <= bounds.maxR; row++) {
+            for (uint32_t col = 0; col < state->data[row].size(); col++) {
                 if (upper) {
                     state->data[row][col] = std::toupper(state->data[row][col]);
                 } else {
@@ -119,12 +119,12 @@ void changeCaseVisual(State* state, bool upper) {
 void sortLines(State* state) {
     Bounds bounds = getBounds(state);
     std::vector<std::string> lines;
-    for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+    for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
         lines.push_back(state->data[i]);
     }
     std::sort(lines.begin(), lines.end());
-    int index = 0;
-    for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+    int32_t index = 0;
+    for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
         state->data[i] = lines[index];
         index++;
     }
@@ -140,7 +140,7 @@ void setStateFromWordPosition(State* state, WordPosition pos) {
 
 void surroundParagraph(State* state, bool includeLastLine) {
     auto start = state->row;
-    for (int i = (int)start; i >= 0; i--) {
+    for (int32_t i = (int32_t)start; i >= 0; i--) {
         if (state->data[i] == "") {
             break;
         } else {
@@ -149,7 +149,7 @@ void surroundParagraph(State* state, bool includeLastLine) {
     }
     state->visual.row = start;
     auto end = state->row;
-    for (unsigned int i = state->row; i < state->data.size(); i++) {
+    for (uint32_t i = state->row; i < state->data.size(); i++) {
         if (state->data[i] == "") {
             if (includeLastLine) {
                 end = i;
@@ -163,8 +163,8 @@ void surroundParagraph(State* state, bool includeLastLine) {
 }
 
 bool isValidMoveableChunk(State* state, Bounds bounds) {
-    int start = getNumLeadingSpaces(state->data[bounds.minR]);
-    for (unsigned int i = bounds.minR + 1; i <= bounds.maxR; i++) {
+    int32_t start = getNumLeadingSpaces(state->data[bounds.minR]);
+    for (uint32_t i = bounds.minR + 1; i <= bounds.maxR; i++) {
         if (getNumLeadingSpaces(state->data[i]) < start && state->data[i] != "") {
             return false;
         }
@@ -174,7 +174,7 @@ bool isValidMoveableChunk(State* state, Bounds bounds) {
 
 bool visualBlockValid(State* state) {
     Bounds bounds = getBounds(state);
-    for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+    for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
         if (bounds.maxC >= state->data[i].length()) {
             return false;
         }
@@ -186,9 +186,9 @@ std::string getInVisual(State* state) {
     Bounds bounds = getBounds(state);
     std::string clip = "";
     if (state->visualType == BLOCK) {
-        unsigned int min = std::min(bounds.minC, bounds.maxC);
-        unsigned int max = std::max(bounds.minC, bounds.maxC);
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        uint32_t min = std::min(bounds.minC, bounds.maxC);
+        uint32_t max = std::max(bounds.minC, bounds.maxC);
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             clip += safeSubstring(state->data[i], min, max + 1 - min) + "\n";
         }
     } else if (state->visualType == LINE) {
@@ -196,7 +196,7 @@ std::string getInVisual(State* state) {
             clip += state->data[i] + "\n";
         }
     } else if (state->visualType == NORMAL) {
-        unsigned int index = bounds.minC;
+        uint32_t index = bounds.minC;
         for (size_t i = bounds.minR; i < bounds.maxR; i++) {
             while (index < state->data[i].size()) {
                 clip += state->data[i][index];
@@ -220,7 +220,7 @@ Position changeInVisual(State* state) {
         state->data[bounds.minR] = std::string("");
     } else if (state->visualType == BLOCK) {
         deleteInVisual(state);
-        unsigned int min = std::min(bounds.minC, bounds.maxC);
+        uint32_t min = std::min(bounds.minC, bounds.maxC);
         pos.col = min;
     } else if (state->visualType == NORMAL) {
         std::string firstPart = "";
@@ -254,9 +254,9 @@ Position deleteInVisual(State* state) {
     if (state->visualType == LINE) {
         state->data.erase(state->data.begin() + bounds.minR, state->data.begin() + bounds.maxR + 1);
     } else if (state->visualType == BLOCK) {
-        unsigned int min = std::min(bounds.minC, bounds.maxC);
-        unsigned int max = std::max(bounds.minC, bounds.maxC);
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        uint32_t min = std::min(bounds.minC, bounds.maxC);
+        uint32_t max = std::max(bounds.minC, bounds.maxC);
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             std::string firstPart = safeSubstring(state->data[i], 0, min);
             std::string secondPart = safeSubstring(state->data[i], max + 1);
             state->data[i] = firstPart + secondPart;
@@ -360,16 +360,16 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
         state->prevKeys = "";
     } else if (!onlyMotions && state->visualType == BLOCK && state->prevKeys == "g" && c == ctrl('s')) {
         Bounds bounds = getBounds(state);
-        int iterations = 1;
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        int32_t iterations = 1;
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             getAndAddNumber(state, i, state->col, -1 * iterations);
             iterations++;
         }
         state->prevKeys = "";
     } else if (!onlyMotions && state->visualType == BLOCK && state->prevKeys == "g" && c == ctrl('a')) {
         Bounds bounds = getBounds(state);
-        int iterations = 1;
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        int32_t iterations = 1;
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             getAndAddNumber(state, i, state->col, iterations);
             iterations++;
         }
@@ -384,7 +384,7 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
     } else if (!onlyMotions && state->prevKeys == "g" && c == 'f') {
         if (state->visualType == NORMAL) {
             std::vector<std::string> extensions = {"", ".js", ".jsx", ".ts", ".tsx"};
-            for (unsigned int i = 0; i < extensions.size(); i++) {
+            for (uint32_t i = 0; i < extensions.size(); i++) {
                 try {
                     std::filesystem::path filePath(state->filename);
                     std::filesystem::path dir = filePath.parent_path();
@@ -421,12 +421,12 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
         state->prevKeys += c;
     } else if (!onlyMotions && state->visualType == BLOCK && c == ctrl('s')) {
         Bounds bounds = getBounds(state);
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             getAndAddNumber(state, i, state->col, -1);
         }
     } else if (!onlyMotions && state->visualType == BLOCK && c == ctrl('a')) {
         Bounds bounds = getBounds(state);
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             getAndAddNumber(state, i, state->col, 1);
         }
     } else if (!onlyMotions && c == 'm') {
@@ -538,7 +538,7 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
         state->row = state->data.size() - 1;
     } else if (!onlyMotions && c == '=') {
         Bounds bounds = getBounds(state);
-        for (int i = bounds.minR; i <= (int)bounds.maxR; i++) {
+        for (int32_t i = bounds.minR; i <= (int32_t)bounds.maxR; i++) {
             indentLine(state, i);
         }
         state->row = bounds.minR;
@@ -560,8 +560,8 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
     } else if (c == 'n') {
         state->searching = true;
         state->col += 1;
-        unsigned int temp_col = state->col;
-        unsigned int temp_row = state->row;
+        uint32_t temp_col = state->col;
+        uint32_t temp_row = state->row;
         bool result = setSearchResult(state);
         if (result == false) {
             state->searchFail = true;
@@ -572,7 +572,7 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
     } else if (!onlyMotions && c == '<') {
         Bounds bounds = getBounds(state);
         state->row = bounds.minR;
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             deindent(state);
             state->row += 1;
         }
@@ -584,7 +584,7 @@ bool sendVisualKeys(State* state, char c, bool onlyMotions) {
     } else if (!onlyMotions && c == '>') {
         Bounds bounds = getBounds(state);
         state->row = bounds.minR;
-        for (unsigned int i = bounds.minR; i <= bounds.maxR; i++) {
+        for (uint32_t i = bounds.minR; i <= bounds.maxR; i++) {
             indent(state);
             state->row += 1;
         }
diff --git a/src/util/bounds.h b/src/util/bounds.h
index 448dfa5..6a2ba8c 100644
--- a/src/util/bounds.h
+++ b/src/util/bounds.h
@@ -1,8 +1,10 @@
+#include <cstdint>
+
 #pragma once
 
 struct Bounds {
-    unsigned int minR;
-    unsigned int maxR;
-    unsigned int minC;
-    unsigned int maxC;
+    uint32_t minR;
+    uint32_t maxR;
+    uint32_t minC;
+    uint32_t maxC;
 };
diff --git a/src/util/clipboard.cpp b/src/util/clipboard.cpp
index 6ed6a58..363760b 100644
--- a/src/util/clipboard.cpp
+++ b/src/util/clipboard.cpp
@@ -30,7 +30,7 @@ std::string getFromClipboard() {
         result += buffer.data();
     }
 
-    int status = pclose(pipe);
+    int32_t status = pclose(pipe);
     if (status != 0 || result.empty()) {
         return {""};
     }
@@ -173,20 +173,20 @@ void pasteFromClipboardVisual(State* state) {
     }
     fixColOverMax(state);
     if (state->data.size() == 0) {
-        for (unsigned int i = 0; i < clip.size(); i++) {
+        for (uint32_t i = 0; i < clip.size(); i++) {
             state->data.push_back(clip[i]);
         }
     } else if (!result.empty() && result.back() == '\n') {
-        for (int i = 0; i < (int)clip.size(); i++) {
+        for (int32_t i = 0; i < (int32_t)clip.size(); i++) {
             state->data.insert(state->data.begin() + i + state->row, clip[i]);
         }
     } else if (clip.size() > 0) {
         std::string current = state->data[state->row];
         state->data[state->row] = current.substr(0, state->col);
         state->data[state->row] += clip[0];
-        int lastRow = state->row;
-        for (int i = 1; i < (int)clip.size(); i++) {
-            int r = i + state->row;
+        int32_t lastRow = state->row;
+        for (int32_t i = 1; i < (int32_t)clip.size(); i++) {
+            int32_t r = i + state->row;
             state->data.insert(state->data.begin() + r, clip[i]);
             lastRow = r;
         }
@@ -204,20 +204,20 @@ void pasteFromClipboard(State* state) {
         clip.push_back(line);
     }
     if (state->data.size() == 0) {
-        for (unsigned int i = 0; i < clip.size(); i++) {
+        for (uint32_t i = 0; i < clip.size(); i++) {
             state->data.push_back(clip[i]);
         }
     } else if (!result.empty() && result.back() == '\n') {
-        for (int i = 0; i < (int)clip.size(); i++) {
+        for (int32_t i = 0; i < (int32_t)clip.size(); i++) {
             state->data.insert(state->data.begin() + i + state->row, clip[i]);
         }
     } else if (clip.size() > 0) {
         std::string current = state->data[state->row];
         state->data[state->row] = current.substr(0, state->col);
         state->data[state->row] += clip[0];
-        int lastRow = state->row;
-        for (int i = 1; i < (int)clip.size(); i++) {
-            int r = i + state->row;
+        int32_t lastRow = state->row;
+        for (int32_t i = 1; i < (int32_t)clip.size(); i++) {
+            int32_t r = i + state->row;
             state->data.insert(state->data.begin() + r, clip[i]);
             lastRow = r;
         }
@@ -235,20 +235,20 @@ void pasteFromClipboardAfter(State* state) {
         clip.push_back(line);
     }
     if (!result.empty() && result.back() == '\n') {
-        for (int i = 0; i < (int)clip.size(); i++) {
+        for (int32_t i = 0; i < (int32_t)clip.size(); i++) {
             state->data.insert(state->data.begin() + i + state->row + 1, clip[i]);
         }
     } else if (clip.size() > 0) {
         std::string current = state->data[state->row];
-        int breakCol = state->col;
+        int32_t breakCol = state->col;
         if (state->col + 1 <= state->data[state->row].length()) {
             breakCol = state->col + 1;
         }
         state->data[state->row] = current.substr(0, breakCol);
         state->data[state->row] += clip[0];
-        int lastRow = state->row;
-        for (int i = 1; i < (int)clip.size(); i++) {
-            int r = i + state->row;
+        int32_t lastRow = state->row;
+        for (int32_t i = 1; i < (int32_t)clip.size(); i++) {
+            int32_t r = i + state->row;
             state->data.insert(state->data.begin() + r, clip[i]);
             lastRow = r;
         }
diff --git a/src/util/comment.cpp b/src/util/comment.cpp
index 89ed413..a0c0e94 100644
--- a/src/util/comment.cpp
+++ b/src/util/comment.cpp
@@ -43,10 +43,10 @@ std::string trimComment(State* state, std::string line) {
 
 void toggleComment(State* state) { toggleCommentHelper(state, state->row, -1); }
 
-void toggleCommentHelper(State* state, unsigned int row, int commentIndex) {
+void toggleCommentHelper(State* state, uint32_t row, int32_t commentIndex) {
     std::string line = state->data[row];
     if (commentIndex == -1) {
-        int i = getNumLeadingSpaces(line);
+        int32_t i = getNumLeadingSpaces(line);
         if (isCommentWithSpace(state, line)) {
             state->data[row] = line.substr(0, i) + line.substr(i + state->commentSymbol.length() + 1);
             return;
@@ -56,7 +56,7 @@ void toggleCommentHelper(State* state, unsigned int row, int commentIndex) {
         }
     }
     if (line.length() != 0) {
-        int spaces = commentIndex != -1 ? commentIndex : getNumLeadingSpaces(line);
+        int32_t spaces = commentIndex != -1 ? commentIndex : getNumLeadingSpaces(line);
         state->data[row] = line.substr(0, spaces) + state->commentSymbol + ' ' + line.substr(spaces);
     }
 }
@@ -79,11 +79,11 @@ void toggleCommentLines(State* state, Bounds bounds) {
             break;
         }
     }
-    int minIndentLevel = -1;
+    int32_t minIndentLevel = -1;
     if (foundNonComment) {
         minIndentLevel = INT_MAX;
         for (size_t i = bounds.minR; i <= bounds.maxR; i++) {
-            int indent = getNumLeadingSpaces(state->data[i]);
+            int32_t indent = getNumLeadingSpaces(state->data[i]);
             if (indent < minIndentLevel && state->data[i] != "") {
                 minIndentLevel = indent;
             }
@@ -100,14 +100,14 @@ void unCommentBlock(State* state) {
     bounds.minC = 0;
     bounds.maxC = 0;
     if (isComment(state, state->data[state->row])) {
-        for (int i = (int)state->row; i >= 0; i--) {
+        for (int32_t i = (int32_t)state->row; i >= 0; i--) {
             if (!isComment(state, state->data[i])) {
                 state->row = i;
                 break;
             }
         }
     }
-    for (unsigned int i = state->row; i < state->data.size(); i++) {
+    for (uint32_t i = state->row; i < state->data.size(); i++) {
         if (!foundComment) {
             if (isComment(state, state->data[i])) {
                 foundComment = true;
diff --git a/src/util/comment.h b/src/util/comment.h
index f14838e..ee170f0 100644
--- a/src/util/comment.h
+++ b/src/util/comment.h
@@ -6,7 +6,7 @@
 #include <vector>
 
 void toggleComment(State* state);
-void toggleCommentHelper(State* state, unsigned int row, int commentIndex);
+void toggleCommentHelper(State* state, uint32_t row, int32_t commentIndex);
 void toggleCommentLines(State* state, Bounds bounds);
 std::string trimLeadingComment(State* state, std::string line);
 std::string trimComment(State* state, std::string line);
diff --git a/src/util/customAssert.h b/src/util/customAssert.h
new file mode 100644
index 0000000..85b5344
--- /dev/null
+++ b/src/util/customAssert.h
@@ -0,0 +1,10 @@
+#include <iostream>
+
+#define CUSTOM_ASSERT(condition) \
+    if (!(condition)) {      \
+        endwin(); \
+        std::cerr << "\n\e[31mAssertion failed: \e[0m" << #condition << " \e[32m" << __FILE__ << ":" << __LINE__ << "\e[0m\n\n"; \
+        std::abort();        \
+    }
+
+#pragma once
diff --git a/src/util/fileExplorerNode.cpp b/src/util/fileExplorerNode.cpp
index fb9cee5..a0eab4f 100644
--- a/src/util/fileExplorerNode.cpp
+++ b/src/util/fileExplorerNode.cpp
@@ -10,7 +10,7 @@ void FileExplorerNode::close() {
     }
 }
 
-int FileExplorerNode::expand(std::string input) {
+int32_t FileExplorerNode::expand(std::string input) {
     std::stringstream ss(input);
     std::string line;
     std::vector<std::string> path;
@@ -19,11 +19,11 @@ int FileExplorerNode::expand(std::string input) {
     }
     FileExplorerNode* current = this;
     bool found = false;
-    int output = 0;
-    for (unsigned int i = 0; i < path.size(); i++) {
+    int32_t output = 0;
+    for (uint32_t i = 0; i < path.size(); i++) {
         current->open();
         found = false;
-        for (unsigned int j = 0; j < current->children.size(); j++) {
+        for (uint32_t j = 0; j < current->children.size(); j++) {
             if (current->children[j].name == path[i]) {
                 current = &current->children[j];
                 found = true;
@@ -40,10 +40,10 @@ int FileExplorerNode::expand(std::string input) {
     return output;
 }
 
-int FileExplorerNode::getTotalChildren() {
-    int total = 1;
+int32_t FileExplorerNode::getTotalChildren() {
+    int32_t total = 1;
     if (this->isOpen) {
-        for (unsigned int i = 0; i < this->children.size(); i++) {
+        for (uint32_t i = 0; i < this->children.size(); i++) {
             total += this->children[i].getTotalChildren();
         }
     }
@@ -57,7 +57,7 @@ void FileExplorerNode::refresh() {
         bool found = false;
         for (const auto & entry : std::filesystem::directory_iterator(this->path)) {
             found = false;
-            for (unsigned int i = 0; i < this->children.size(); i++) {
+            for (uint32_t i = 0; i < this->children.size(); i++) {
                 if (this->children[i].path == entry.path()) {
                     newChildren.push_back(this->children[i]);
                     found = true;
@@ -103,13 +103,13 @@ void FileExplorerNode::open() {
     }
 }
 
-FileExplorerNode* FileExplorerNode::getFileExplorerNode(FileExplorerNode* node, int n) {
+FileExplorerNode* FileExplorerNode::getFileExplorerNode(FileExplorerNode* node, int32_t n) {
     if (n < 0 || !node) {
         return nullptr;
     }
     std::stack<FileExplorerNode*> stack;
     stack.push(node);
-    int count = 0;
+    int32_t count = 0;
     while (!stack.empty()) {
         FileExplorerNode* current = stack.top();
         stack.pop();
diff --git a/src/util/fileExplorerNode.h b/src/util/fileExplorerNode.h
index a3c95c0..7d891e4 100644
--- a/src/util/fileExplorerNode.h
+++ b/src/util/fileExplorerNode.h
@@ -18,9 +18,9 @@ public:
     FileExplorerNode();
     FileExplorerNode(const std::filesystem::path& path);
     FileExplorerNode(const std::filesystem::path& path, FileExplorerNode* parent);
-    static FileExplorerNode* getFileExplorerNode(FileExplorerNode* node, int index);
-    int getTotalChildren();
-    int expand(std::string input);
+    static FileExplorerNode* getFileExplorerNode(FileExplorerNode* node, int32_t index);
+    int32_t getTotalChildren();
+    int32_t expand(std::string input);
     void remove();
     void open();
     void refresh();
diff --git a/src/util/helper.cpp b/src/util/helper.cpp
index f59f988..33729b8 100644
--- a/src/util/helper.cpp
+++ b/src/util/helper.cpp
@@ -16,14 +16,14 @@
 #include <string>
 #include <vector>
 
-void jumpToHarpoon(State* state, unsigned int num) {
+void jumpToHarpoon(State* state, uint32_t num) {
     if (0 < num && num <= state->harpoonFiles.size()) {
         state->harpoonIndex = num - 1;
         state->resetState(state->harpoonFiles[state->harpoonIndex]);
     }
 }
 
-std::string setStringToLength(const std::string& s, unsigned int length) {
+std::string setStringToLength(const std::string& s, uint32_t length) {
     if (s.length() <= length) {
         return s;
     } else {
@@ -55,7 +55,7 @@ void rename(State* state, const std::filesystem::path& oldPath, const std::strin
     }
 
     auto relativePath = std::filesystem::relative(oldPath, std::filesystem::current_path()).string();
-    for(unsigned int i = 0; i < state->harpoonFiles.size(); i++) {
+    for(uint32_t i = 0; i < state->harpoonFiles.size(); i++) {
         if (state->harpoonFiles[i] == relativePath) {
             state->harpoonFiles[i] = newPath.string();
             break;
@@ -75,7 +75,7 @@ std::filesystem::path getUniqueFilePath(const std::filesystem::path& basePath) {
     std::filesystem::path extension = basePath.extension();
     std::filesystem::path directory = basePath.parent_path();
 
-    for (int i = 1; ; ++i) {
+    for (int32_t i = 1; ; ++i) {
         std::filesystem::path newPath = directory / (stem.string() + " (" + std::to_string(i) + ")" + extension.string());
         if (!std::filesystem::exists(newPath)) {
             return newPath;
@@ -101,7 +101,7 @@ void createFile(State* state, std::filesystem::path path, std::string name) {
 void changeToGrepFile(State* state) {
     if (state->grep.selection < state->grepOutput.size()) {
         std::filesystem::path selectedFile = state->grepOutput[state->grep.selection].path;
-        int lineNum = state->grepOutput[state->grep.selection].lineNum;
+        int32_t lineNum = state->grepOutput[state->grep.selection].lineNum;
         state->resetState(selectedFile);
         state->row = lineNum - 1;
         setSearchResultCurrentLine(state, state->grep.query);
@@ -127,7 +127,7 @@ bool isFunctionLine(std::string line, std::string s, std::string extension) {
             {"", "("},
         };
     }
-    for (unsigned int i = 0; i < functionStrings.size(); i++) {
+    for (uint32_t i = 0; i < functionStrings.size(); i++) {
         if (line.find(functionStrings[i][0] + " " + s + functionStrings[i][1]) != std::string::npos) {
             return true;
         }
@@ -137,7 +137,7 @@ bool isFunctionLine(std::string line, std::string s, std::string extension) {
 
 void findDefinitionFromGrepOutput(State* state, std::string s) {
     std::string extension = getExtension(state->filename);
-    for (unsigned int i = 0; i < state->grepOutput.size(); i++) {
+    for (uint32_t i = 0; i < state->grepOutput.size(); i++) {
         if (state->grepOutput[i].line.back() == '(' || state->grepOutput[i].line.back() == '{') {
             if (isFunctionLine(state->grepOutput[i].line, s, extension)) {
                 state->grep.selection = i;
@@ -168,9 +168,9 @@ void refocusFileExplorer(State* state, bool changeMode) {
 }
 
 void centerFileExplorer(State* state) {
-    if ((state->fileExplorerIndex - ((int)state->maxY / 2)) > 0) {
-        if (state->fileExplorer->getTotalChildren() > ((int)state->maxY)) {
-            state->fileExplorerWindowLine = (state->fileExplorerIndex - ((int)state->maxY / 2));
+    if ((state->fileExplorerIndex - ((int32_t)state->maxY / 2)) > 0) {
+        if (state->fileExplorer->getTotalChildren() > ((int32_t)state->maxY)) {
+            state->fileExplorerWindowLine = (state->fileExplorerIndex - ((int32_t)state->maxY / 2));
         }
     } else {
         state->fileExplorerWindowLine = 0;
@@ -200,11 +200,11 @@ char getCorrespondingParen(char c) {
 
 Position matchIt(State* state) {
     char firstParen = state->data[state->row][state->col];
-    int stack = 0;
+    int32_t stack = 0;
     if (isOpenParen(firstParen)) {
         char secondParen = getCorrespondingParen(firstParen);
-        unsigned int col = state->col;
-        for (unsigned int row = state->row; row < state->data.size(); row++) {
+        uint32_t col = state->col;
+        for (uint32_t row = state->row; row < state->data.size(); row++) {
             while (col < state->data[row].size()) {
                 if (state->data[row][col] == secondParen) {
                     if (stack == 1) {
@@ -221,16 +221,16 @@ Position matchIt(State* state) {
         }
     } else if (isCloseParen(firstParen)) {
         char secondParen = getCorrespondingParen(firstParen);
-        int col = (int)state->col;
+        int32_t col = (int32_t)state->col;
         bool first = true;
-        for (int row = (int)state->row; row >= 0; row--) {
+        for (int32_t row = (int32_t)state->row; row >= 0; row--) {
             if (!first) {
                 col = state->data[row].length() > 0 ? state->data[row].length() - 1 : 0;
             }
             while (col >= 0) {
                 if (state->data[row][col] == secondParen) {
                     if (stack == 1) {
-                        return {(unsigned int)row, (unsigned int)col};
+                        return {(uint32_t)row, (uint32_t)col};
                     } else {
                         stack--;
                     }
@@ -259,12 +259,12 @@ std::string safeSubstring(const std::string& str, std::size_t pos) {
     return str.substr(pos);
 }
 
-void getAndAddNumber(State* state, unsigned int row, unsigned int col, int num) {
+void getAndAddNumber(State* state, uint32_t row, uint32_t col, int32_t num) {
     std::string number;
-    int startPos = col;
+    int32_t startPos = col;
     if (std::isdigit(state->data[row][col])) {
         number += state->data[row][col];
-        for (int i = (int)col - 1; i >= 0; i--) {
+        for (int32_t i = (int32_t)col - 1; i >= 0; i--) {
             if (std::isdigit(state->data[row][i])) {
                 number = state->data[row][i] + number;
                 startPos = i;
@@ -272,7 +272,7 @@ void getAndAddNumber(State* state, unsigned int row, unsigned int col, int num)
                 break;
             }
         }
-        for (unsigned int i = col + 1; i < state->data[row].length(); i++) {
+        for (uint32_t i = col + 1; i < state->data[row].length(); i++) {
             if (std::isdigit(state->data[row][i])) {
                 number += state->data[row][i];
             } else {
@@ -318,8 +318,8 @@ std::string getCommentSymbol(const std::string& filename) {
 
 bool isAlphanumeric(char c) { return std::isalnum(c) || c == '_' ? 1 : 0; }
 
-unsigned int findNextChar(State* state, char c) {
-    for (unsigned int i = state->col; i < state->data[state->row].length(); i++) {
+uint32_t findNextChar(State* state, char c) {
+    for (uint32_t i = state->col; i < state->data[state->row].length(); i++) {
         if (state->data[state->row][i] == c) {
             return i;
         }
@@ -327,9 +327,9 @@ unsigned int findNextChar(State* state, char c) {
     return state->col;
 }
 
-unsigned int toNextChar(State* state, char c) {
-    unsigned int index = state->col;
-    for (unsigned int i = state->col; i < state->data[state->row].length(); i++) {
+uint32_t toNextChar(State* state, char c) {
+    uint32_t index = state->col;
+    for (uint32_t i = state->col; i < state->data[state->row].length(); i++) {
         if (state->data[state->row][i] == c) {
             return index;
         } else {
@@ -341,7 +341,7 @@ unsigned int toNextChar(State* state, char c) {
 
 std::string getGitHash(State* state) {
     std::stringstream command;
-    command << "git blame -l -L " << state->row + 1 << ",+1 " << state->filename << " | awk '{print $1}'";
+    command << "git blame -l -L " << state->row + 1 << ",+1 " << state->filename << " | awk '{print32_t $1}'";
     std::unique_ptr<FILE, int(*)(FILE*)> pipe(popen(command.str().c_str(), "r"), pclose);
     if (!pipe) {
         state->status = "popen() failed!";
@@ -363,7 +363,7 @@ std::string getGitHash(State* state) {
 std::vector<std::string> getGitBlame(const std::string& filename) {
     std::vector<std::string> blameLines;
     try {
-        std::string command = "git --no-pager blame ./" + filename + " --date=short 2>/dev/null | awk '{print $1, $2, $3, $4, \")\"}'";
+        std::string command = "git --no-pager blame ./" + filename + " --date=short 2>/dev/null | awk '{print32_t $1, $2, $3, $4, \")\"}'";
         std::unique_ptr<FILE, int(*)(FILE*)> pipe(popen(command.c_str(), "r"), pclose);
         if (!pipe) {
             throw std::runtime_error("popen() failed!");
@@ -388,8 +388,8 @@ std::vector<std::string> getGitBlame(const std::string& filename) {
     return blameLines;
 }
 
-unsigned int getLineNumberOffset(State* state) {
-    unsigned int offset = 6;
+uint32_t getLineNumberOffset(State* state) {
+    uint32_t offset = 6;
     if (state->mode == BLAME) {
         offset += 65;
     }
@@ -428,7 +428,7 @@ void moveHarpoonLeft(State* state) {
 }
 
 void trimTrailingWhitespace(State* state) {
-    for (unsigned int i = 0; i < state->data.size(); i++) {
+    for (uint32_t i = 0; i < state->data.size(); i++) {
         rtrim(state->data[i]);
     }
 }
@@ -443,7 +443,7 @@ void ltrim(std::string& s) {
 
 std::string getCurrentWord(State* state) {
     std::string currentWord = "";
-    for (int i = (int)state->col - 1; i >= 0; i--) {
+    for (int32_t i = (int32_t)state->col - 1; i >= 0; i--) {
         if (isAlphanumeric(state->data[state->row][i])) {
             currentWord = state->data[state->row][i] + currentWord;
         } else {
@@ -461,7 +461,7 @@ std::string autocomplete(State* state, const std::string& query) {
     for (std::string line : state->data) {
         line += ' ';
         std::string word = "";
-        for (unsigned int i = 0; i < line.length(); i++) {
+        for (uint32_t i = 0; i < line.length(); i++) {
             if (isAlphanumeric(line[i])) {
                 word += line[i];
             } else {
@@ -476,7 +476,7 @@ std::string autocomplete(State* state, const std::string& query) {
         }
     }
     std::string mostCommonWord = "";
-    int maxCount = 0;
+    int32_t maxCount = 0;
     for (const auto& pair : wordCounts) {
         if (pair.second > maxCount && pair.first != query) {
             mostCommonWord = pair.first;
@@ -504,7 +504,7 @@ void replaceCurrentLine(State* state, const std::string& query, const std::strin
 void runCommand(State* state, const std::string& command) {
     try {
         std::string prompt = std::string("bash -ic '") + (command + " >/dev/null 2>/dev/null") + "'";
-        int returnValue = std::system(prompt.c_str());
+        int32_t returnValue = std::system(prompt.c_str());
         if (returnValue != 0) {
             throw std::exception();
         }
@@ -524,7 +524,7 @@ void replaceAllGlobally(State* state, const std::string& query, const std::strin
 #else
 #error "Platform not supported"
 #endif
-        int returnValue = std::system(command.c_str());
+        int32_t returnValue = std::system(command.c_str());
         if (returnValue != 0) {
             throw std::exception();
         }
@@ -535,7 +535,7 @@ void replaceAllGlobally(State* state, const std::string& query, const std::strin
 }
 
 void replaceAll(State* state, const std::string& query, const std::string& replace) {
-    for (unsigned int i = 0; i < state->data.size(); i++) {
+    for (uint32_t i = 0; i < state->data.size(); i++) {
         if (query.empty()) {
             return;
         }
@@ -549,17 +549,17 @@ void replaceAll(State* state, const std::string& query, const std::string& repla
 
 bool setSearchResultReverse(State* state) {
     fixColOverMax(state);
-    unsigned int initialCol = state->col;
-    unsigned int initialRow = state->row;
-    unsigned int col = initialCol;
-    unsigned int row = initialRow;
+    uint32_t initialCol = state->col;
+    uint32_t initialRow = state->row;
+    uint32_t col = initialCol;
+    uint32_t row = initialRow;
     bool isFirst = true;
     do {
         std::string line = isFirst ? state->data[row].substr(0, col) : state->data[row];
         size_t index = line.rfind(state->search.query);
         if (index != std::string::npos) {
             state->row = row;
-            state->col = static_cast<unsigned int>(index);
+            state->col = static_cast<uint32_t>(index);
             return true;
         }
         if (row == 0) {
@@ -574,18 +574,18 @@ bool setSearchResultReverse(State* state) {
     size_t index = line.rfind(state->search.query);
     if (index != std::string::npos) {
         state->row = row;
-        state->col = static_cast<unsigned int>(index);
+        state->col = static_cast<uint32_t>(index);
         return true;
     }
     return false;
 }
 
 bool searchFromTop(State* state) {
-    for (unsigned int i = 0; i < state->data.size(); i++) {
+    for (uint32_t i = 0; i < state->data.size(); i++) {
         size_t index = state->data[i].rfind(state->search.query);
         if (index != std::string::npos) {
             state->row = i;
-            state->col = static_cast<unsigned int>(index);
+            state->col = static_cast<uint32_t>(index);
             return true;
         }
     }
@@ -596,7 +596,7 @@ bool setSearchResultCurrentLine(State* state, const std::string& query) {
     std::string line = state->data[state->row];
     size_t index = line.find(query);
     if (index != std::string::npos) {
-        state->col = static_cast<unsigned int>(index);
+        state->col = static_cast<uint32_t>(index);
         return true;
     }
     return false;
@@ -604,16 +604,16 @@ bool setSearchResultCurrentLine(State* state, const std::string& query) {
 
 bool setSearchResult(State* state) {
     fixColOverMax(state);
-    unsigned int initialCol = state->col;
-    unsigned int initialRow = state->row;
-    unsigned int col = initialCol;
-    unsigned int row = initialRow;
+    uint32_t initialCol = state->col;
+    uint32_t initialRow = state->row;
+    uint32_t col = initialCol;
+    uint32_t row = initialRow;
     do {
         std::string line = state->data[row].substr(col);
         size_t index = line.find(state->search.query);
         if (index != std::string::npos) {
             state->row = row;
-            state->col = static_cast<unsigned int>(index) + col;
+            state->col = static_cast<uint32_t>(index) + col;
             return true;
         }
         row = (row + 1) % state->data.size();
@@ -624,7 +624,7 @@ bool setSearchResult(State* state) {
     size_t index = line.find(state->search.query);
     if (index != std::string::npos) {
         state->row = row;
-        state->col = static_cast<unsigned int>(index) + col;
+        state->col = static_cast<uint32_t>(index) + col;
         return true;
     }
     return false;
@@ -652,8 +652,8 @@ char ctrl(char c) { return c - 'a' + 1; }
 
 char unctrl(char c) { return c + 'a' - 1; }
 
-unsigned int getIndent(const std::string& str) {
-    for (unsigned int i = 0; i < str.length(); i++) {
+uint32_t getIndent(const std::string& str) {
+    for (uint32_t i = 0; i < str.length(); i++) {
         if (str[i] != ' ') {
             return i;
         }
@@ -661,9 +661,9 @@ unsigned int getIndent(const std::string& str) {
     return 0;
 }
 
-unsigned int getPrevEmptyLine(State* state) {
+uint32_t getPrevEmptyLine(State* state) {
     bool hitNonEmpty = false;
-    for (int i = (int)state->row; i >= 0; i--) {
+    for (int32_t i = (int32_t)state->row; i >= 0; i--) {
         if (state->data[i] != "") {
             hitNonEmpty = true;
         } else if (hitNonEmpty && state->data[i] == "") {
@@ -673,9 +673,9 @@ unsigned int getPrevEmptyLine(State* state) {
     return state->row;
 }
 
-unsigned int getNextEmptyLine(State* state) {
+uint32_t getNextEmptyLine(State* state) {
     bool hitNonEmpty = false;
-    for (unsigned int i = state->row; i < state->data.size(); i++) {
+    for (uint32_t i = state->row; i < state->data.size(); i++) {
         if (state->data[i] != "") {
             hitNonEmpty = true;
         } else if (hitNonEmpty && state->data[i] == "") {
@@ -685,9 +685,9 @@ unsigned int getNextEmptyLine(State* state) {
     return state->row;
 }
 
-unsigned int getPrevLineSameIndent(State* state) {
-    unsigned int current = getIndent(trimLeadingComment(state, state->data[state->row]));
-    for (int i = (int)state->row - 1; i >= 0; i--) {
+uint32_t getPrevLineSameIndent(State* state) {
+    uint32_t current = getIndent(trimLeadingComment(state, state->data[state->row]));
+    for (int32_t i = (int32_t)state->row - 1; i >= 0; i--) {
         if (current == getIndent(trimLeadingComment(state, state->data[i])) && state->data[i] != "") {
             return i;
         }
@@ -695,9 +695,9 @@ unsigned int getPrevLineSameIndent(State* state) {
     return state->row;
 }
 
-unsigned int getNextLineSameIndent(State* state) {
-    unsigned int current = getIndent(trimLeadingComment(state, state->data[state->row]));
-    for (unsigned int i = state->row + 1; i < state->data.size(); i++) {
+uint32_t getNextLineSameIndent(State* state) {
+    uint32_t current = getIndent(trimLeadingComment(state, state->data[state->row]));
+    for (uint32_t i = state->row + 1; i < state->data.size(); i++) {
         if (current == getIndent(trimLeadingComment(state, state->data[i])) && state->data[i] != "") {
             return i;
         }
@@ -705,17 +705,17 @@ unsigned int getNextLineSameIndent(State* state) {
     return state->row;
 }
 
-WordPosition findQuoteBounds(const std::string& str, char quoteChar, unsigned int cursor, bool includeQuote) {
-    int lastQuoteIndex = -1;
-    for (unsigned int i = 0; i <= cursor; i++) {
+WordPosition findQuoteBounds(const std::string& str, char quoteChar, uint32_t cursor, bool includeQuote) {
+    int32_t lastQuoteIndex = -1;
+    for (uint32_t i = 0; i <= cursor; i++) {
         if (str[i] == quoteChar) {
             lastQuoteIndex = i;
         }
     }
-    unsigned int i;
+    uint32_t i;
     for (i = cursor + 1; i < str.length(); i++) {
         if (str[i] == quoteChar) {
-            if (lastQuoteIndex != -1 && lastQuoteIndex < (int)cursor) {
+            if (lastQuoteIndex != -1 && lastQuoteIndex < (int32_t)cursor) {
                 break;
             } else {
                 if (lastQuoteIndex == -1) {
@@ -728,20 +728,20 @@ WordPosition findQuoteBounds(const std::string& str, char quoteChar, unsigned in
     }
     if (i != str.length()) {
         if (i - lastQuoteIndex == 1 || includeQuote) {
-            return {(unsigned int)lastQuoteIndex, (unsigned int)i};
+            return {(uint32_t)lastQuoteIndex, (uint32_t)i};
         } else {
-            return {(unsigned int)lastQuoteIndex + 1, (unsigned int)i - 1};
+            return {(uint32_t)lastQuoteIndex + 1, (uint32_t)i - 1};
         }
     } else {
         return {0, 0};
     }
 }
 
-WordPosition findParentheses(const std::string& str, char openParen, char closeParen, unsigned int cursor, bool includeParen) {
-    int balance = 0;
-    int openParenIndex = -1;
+WordPosition findParentheses(const std::string& str, char openParen, char closeParen, uint32_t cursor, bool includeParen) {
+    int32_t balance = 0;
+    int32_t openParenIndex = -1;
     // look back for openParen
-    for (int i = cursor; i >= 0; i--) {
+    for (int32_t i = cursor; i >= 0; i--) {
         if (str[i] == openParen) {
             if (balance == 0) {
                 openParenIndex = i;
@@ -749,14 +749,14 @@ WordPosition findParentheses(const std::string& str, char openParen, char closeP
             } else {
                 balance--;
             }
-        } else if (str[i] == closeParen && i != (int)cursor) {
+        } else if (str[i] == closeParen && i != (int32_t)cursor) {
             balance++;
         }
     }
     balance = 0;
     // if haven't found yet look forward for openParen
     if (openParenIndex == -1) {
-        for (int i = cursor; i < (int)str.length(); i++) {
+        for (int32_t i = cursor; i < (int32_t)str.length(); i++) {
             if (str[i] == openParen) {
                 if (balance == 0) {
                     openParenIndex = i;
@@ -774,15 +774,15 @@ WordPosition findParentheses(const std::string& str, char openParen, char closeP
     if (openParenIndex == -1) {
         return {0, 0};
     }
-    for (int i = openParenIndex + 1; i < (int)str.length(); i++) {
+    for (int32_t i = openParenIndex + 1; i < (int32_t)str.length(); i++) {
         if (str[i] == openParen) {
             balance--;
         } else if (str[i] == closeParen) {
             if (balance == 0) {
                 if (i - openParenIndex == 1 || includeParen) {
-                    return {(unsigned int)openParenIndex, (unsigned int)i};
+                    return {(uint32_t)openParenIndex, (uint32_t)i};
                 } else {
-                    return {(unsigned int)openParenIndex + 1, (unsigned int)i - 1};
+                    return {(uint32_t)openParenIndex + 1, (uint32_t)i - 1};
                 }
             } else {
                 balance++;
@@ -792,7 +792,7 @@ WordPosition findParentheses(const std::string& str, char openParen, char closeP
     return {0, 0};
 }
 
-WordPosition getBigWordPosition(const std::string& str, unsigned int cursor) {
+WordPosition getBigWordPosition(const std::string& str, uint32_t cursor) {
     if (cursor >= str.size()) {
         return {0, 0};
     }
@@ -811,8 +811,8 @@ WordPosition getBigWordPosition(const std::string& str, unsigned int cursor) {
         return {0, 0};
     }
     // Find the end of the chunk
-    unsigned int start = cursor;
-    unsigned int end = start;
+    uint32_t start = cursor;
+    uint32_t end = start;
     while (end < str.size() && str[end] != ' ') {
         end++;
     }
@@ -820,7 +820,7 @@ WordPosition getBigWordPosition(const std::string& str, unsigned int cursor) {
     return {start, end - 1};
 }
 
-WordPosition getWordPosition(const std::string& str, unsigned int cursor) {
+WordPosition getWordPosition(const std::string& str, uint32_t cursor) {
     if (cursor >= str.size()) {
         return {0, 0};
     }
@@ -839,8 +839,8 @@ WordPosition getWordPosition(const std::string& str, unsigned int cursor) {
         return {0, 0};
     }
     // Find the end of the chunk
-    unsigned int start = cursor;
-    unsigned int end = start;
+    uint32_t start = cursor;
+    uint32_t end = start;
     while (end < str.size() && str[end] != ' ' && (isAlphanumeric(str[start]) == isAlphanumeric(str[end]))) {
         end++;
     }
@@ -857,7 +857,7 @@ bool isAllLowercase(const std::string& str) {
     return true;
 }
 
-int maxConsecutiveMatch(const std::filesystem::path& filePath, const std::string& query) {
+int32_t maxConsecutiveMatch(const std::filesystem::path& filePath, const std::string& query) {
     std::string filePathStr = filePath.string();
     std::string queryLower = query;
 
@@ -866,8 +866,8 @@ int maxConsecutiveMatch(const std::filesystem::path& filePath, const std::string
         std::transform(queryLower.begin(), queryLower.end(), queryLower.begin(), [](unsigned char c) { return std::tolower(c); });
     }
 
-    int maxLength = 0;
-    int currentLength = 0;
+    int32_t maxLength = 0;
+    int32_t currentLength = 0;
     for (size_t i = 0, j = 0; i < filePathStr.size();) {
         if (filePathStr[i] == queryLower[j]) {
             currentLength++;
@@ -907,8 +907,8 @@ bool filePathContainsSubstring(const std::filesystem::path& filePath, const std:
         std::transform(queryLower.begin(), queryLower.end(), queryLower.begin(), [](unsigned char c) { return std::tolower(c); });
     }
 
-    unsigned int filePathIndex = 0;
-    unsigned int queryIndex = 0;
+    uint32_t filePathIndex = 0;
+    uint32_t queryIndex = 0;
     while (queryIndex < queryLower.length() && filePathIndex < filePathStr.length()) {
         if (filePathStr[filePathIndex] == queryLower[queryIndex]) {
             filePathIndex++;
@@ -928,7 +928,7 @@ bool shouldIgnoreFile(const std::filesystem::path& path) {
         ".gitconfig",
         ".gitignore"
     };
-    for (unsigned int i = 0; i < allowList.size(); i++) {
+    for (uint32_t i = 0; i < allowList.size(); i++) {
         if (path.string().find(allowList[i]) != std::string::npos) {
             return false;
         }
@@ -949,7 +949,7 @@ bool shouldIgnoreFile(const std::filesystem::path& path) {
         "package-lock.json",
         ".eslintcache"
     };
-    for (unsigned int i = 0; i < ignoreList.size(); i++) {
+    for (uint32_t i = 0; i < ignoreList.size(); i++) {
         if (path.string().find(ignoreList[i]) != std::string::npos) {
             return true;
         }
@@ -962,7 +962,7 @@ std::vector<grepMatch> grepFile(const std::filesystem::path& file_path, const st
     std::vector<grepMatch> matches;
     std::ifstream file(file_path);
     std::string line;
-    int lineNumber = 0;
+    int32_t lineNumber = 0;
     while (std::getline(file, line)) {
         lineNumber++;
         if (line.find(query) != std::string::npos) {
@@ -1020,8 +1020,8 @@ std::vector<std::filesystem::path> findFiles(const std::filesystem::path& dir_pa
         }
     }
     std::sort(matching_files.begin(), matching_files.end(), [&](const std::filesystem::path& a, const std::filesystem::path& b) {
-        int matchA = maxConsecutiveMatch(a, query);
-        int matchB = maxConsecutiveMatch(b, query);
+        int32_t matchA = maxConsecutiveMatch(a, query);
+        int32_t matchB = maxConsecutiveMatch(b, query);
         if (matchA == matchB) {
             if (isTestFile(a.string()) && !isTestFile(b.string())) {
                 return false;
@@ -1053,9 +1053,9 @@ void generateGrepOutput(State* state) {
 
 void generateFindFileOutput(State* state) { state->findFileOutput = findFiles(std::filesystem::current_path(), state->findFile.query); }
 
-unsigned int w(State* state) {
+uint32_t w(State* state) {
     bool space = state->data[state->row][state->col] == ' ';
-    for (unsigned int i = state->col + 1; i < state->data[state->row].size(); i += 1) {
+    for (uint32_t i = state->col + 1; i < state->data[state->row].size(); i += 1) {
         if (state->data[state->row][i] == ' ') {
             space = true;
         } else if (space && state->data[state->row][i] != ' ') {
@@ -1067,10 +1067,10 @@ unsigned int w(State* state) {
     return state->col;
 }
 
-unsigned int b(State* state) {
+uint32_t b(State* state) {
     if (state->col == 0 || state->data[state->row].empty())
         return 0;
-    int i = state->col - 1;
+    int32_t i = state->col - 1;
     while (i >= 0 && state->data[state->row][i] == ' ')
         i--;
     if (i < 0)
@@ -1111,7 +1111,7 @@ std::vector<std::string> readFile(const std::string& filename) {
 
 bool isWindowPositionInvalid(State* state) {
     bool isColTooSmall = state->col < state->windowPosition.col;
-    bool isColTooBig = (int)state->col - (int)state->windowPosition.col > (int)state->maxX - (int)getLineNumberOffset(state) - 1;
+    bool isColTooBig = (int32_t)state->col - (int32_t)state->windowPosition.col > (int32_t)state->maxX - (int32_t)getLineNumberOffset(state) - 1;
     if (isOffScreenVertical(state)) {
         return true;
     } else if (!state->wordwrap && (isColTooSmall || isColTooBig)) {
@@ -1124,8 +1124,8 @@ bool isOffScreenVertical(State* state) {
     if (state->row < state->windowPosition.row) {
         return true;
     }
-    unsigned int windowRow = state->windowPosition.row;
-    unsigned int rowsBelow = 0;
+    uint32_t windowRow = state->windowPosition.row;
+    uint32_t rowsBelow = 0;
     while (windowRow < state->data.size() && rowsBelow + 1 < state->maxY) {
         if (state->row == windowRow) {
             return false;
@@ -1136,9 +1136,9 @@ bool isOffScreenVertical(State* state) {
     return true;
 }
 
-unsigned int getCenteredWindowPosition(State* state) {
-    unsigned int windowRow = state->row;
-    unsigned int rowsAbove = getDisplayRows(state, state->row, state->col);
+uint32_t getCenteredWindowPosition(State* state) {
+    uint32_t windowRow = state->row;
+    uint32_t rowsAbove = getDisplayRows(state, state->row, state->col);
     while (windowRow > 0 && rowsAbove < state->maxY / 2) {
         windowRow--;
         rowsAbove += getDisplayRows(state, windowRow);
@@ -1146,7 +1146,7 @@ unsigned int getCenteredWindowPosition(State* state) {
     return windowRow;
 }
 
-unsigned int getDisplayRows(State* state, unsigned int r, unsigned int c) {
+uint32_t getDisplayRows(State* state, uint32_t r, uint32_t c) {
     if (!state->wordwrap) {
         return 1;
     }
@@ -1154,7 +1154,7 @@ unsigned int getDisplayRows(State* state, unsigned int r, unsigned int c) {
     return 1 + physicalCol / (state->maxX - getLineNumberOffset(state));
 }
 
-unsigned int getDisplayRows(State* state, unsigned int r) {
+uint32_t getDisplayRows(State* state, uint32_t r) {
     if (!state->wordwrap) {
         return 1;
     }
@@ -1187,7 +1187,7 @@ void downScreen(State* state) {
 }
 
 void upHalfScreen(State* state) {
-    for (unsigned int i = 0; i < state->maxY / 2; i++) {
+    for (uint32_t i = 0; i < state->maxY / 2; i++) {
         if (state->row > 0) {
             state->row -= 1;
             state->windowPosition.row -= 1;
@@ -1196,7 +1196,7 @@ void upHalfScreen(State* state) {
 }
 
 void downHalfScreen(State* state) {
-    for (unsigned int i = 0; i < state->maxY / 2; i++) {
+    for (uint32_t i = 0; i < state->maxY / 2; i++) {
         if (state->row < state->data.size() - 1) {
             state->row += 1;
             state->windowPosition.row += 1;
@@ -1241,22 +1241,22 @@ void right(State* state) {
 }
 
 void indent(State* state) {
-    for (unsigned int i = 0; i < state->indent; i++) {
+    for (uint32_t i = 0; i < state->indent; i++) {
         state->data[state->row] = " " + state->data[state->row];
     }
 }
 
 void deindent(State* state) {
-    for (unsigned int i = 0; i < state->indent; i++) {
+    for (uint32_t i = 0; i < state->indent; i++) {
         if (state->data[state->row].substr(0, 1) == " ") {
             state->data[state->row] = state->data[state->row].substr(1);
         }
     }
 }
 
-int getIndexFirstNonSpace(State* state) {
-    int i;
-    for (i = 0; i < (int)state->data[state->row].length(); i++) {
+int32_t getIndexFirstNonSpace(State* state) {
+    int32_t i;
+    for (i = 0; i < (int32_t)state->data[state->row].length(); i++) {
         if (state->data[state->row][i] != ' ') {
             return i;
         }
@@ -1265,7 +1265,7 @@ int getIndexFirstNonSpace(State* state) {
 }
 
 void calcWindowBounds() {
-    int y, x;
+    int32_t y, x;
     getmaxyx(stdscr, y, x);
     State::setMaxYX(y, x);
 }
@@ -1274,7 +1274,7 @@ void insertEmptyLineBelow(State* state) { state->data.insert(state->data.begin()
 
 void insertEmptyLine(State* state) { state->data.insert(state->data.begin() + state->row, ""); }
 
-int maximum(int a, int b) {
+int32_t maximum(int32_t a, int32_t b) {
     if (a > b) {
         return a;
     } else {
@@ -1282,7 +1282,7 @@ int maximum(int a, int b) {
     }
 }
 
-int minimum(int a, int b) {
+int32_t minimum(int32_t a, int32_t b) {
     if (a <= b) {
         return a;
     } else {
diff --git a/src/util/helper.h b/src/util/helper.h
index 1a4c75f..31facf8 100644
--- a/src/util/helper.h
+++ b/src/util/helper.h
@@ -7,15 +7,15 @@
 #include <string>
 #include <vector>
 
-void jumpToHarpoon(State* state, unsigned int num);
+void jumpToHarpoon(State* state, uint32_t num);
 bool isAlphanumeric(char c);
 bool isOffScreenVertical(State* state);
-unsigned int getCenteredWindowPosition(State* state);
-unsigned int getDisplayRows(State* state, unsigned int r, unsigned int c);
-unsigned int getDisplayRows(State* state, unsigned int r);
+uint32_t getCenteredWindowPosition(State* state);
+uint32_t getDisplayRows(State* state, uint32_t r, uint32_t c);
+uint32_t getDisplayRows(State* state, uint32_t r);
 void refocusFileExplorer(State* state, bool changeMode);
 std::string normalizeFilename(std::string filename);
-std::string setStringToLength(const std::string& s, unsigned int length);
+std::string setStringToLength(const std::string& s, uint32_t length);
 bool isInt(const std::string& s);
 bool isTestFile(const std::string& filepath);
 void rename(State* state, const std::filesystem::path& oldPath, const std::string& newName);
@@ -31,17 +31,17 @@ void resetValidCursorState(State* state);
 bool setSearchResultCurrentLine(State* state, const std::string& query);
 Position matchIt(State* state);
 bool searchFromTop(State* state);
-void getAndAddNumber(State* state, unsigned int row, unsigned int col, int num);
+void getAndAddNumber(State* state, uint32_t row, uint32_t col, int32_t num);
 std::string safeSubstring(const std::string& str, std::size_t pos, std::size_t len);
 std::string safeSubstring(const std::string& str, std::size_t pos);
 bool isAllLowercase(const std::string& str);
-unsigned int findNextChar(State* state, char c);
-unsigned int toNextChar(State* state, char c);
-unsigned int getPrevEmptyLine(State* state);
-unsigned int getNextEmptyLine(State* state);
+uint32_t findNextChar(State* state, char c);
+uint32_t toNextChar(State* state, char c);
+uint32_t getPrevEmptyLine(State* state);
+uint32_t getNextEmptyLine(State* state);
 std::string getGitHash(State* state);
 std::vector<std::string> getGitBlame(const std::string& filename);
-unsigned int getLineNumberOffset(State* state);
+uint32_t getLineNumberOffset(State* state);
 void runCommand(State* state, const std::string& command);
 void replaceAllGlobally(State* state, const std::string& query, const std::string& replace);
 void replaceCurrentLine(State* state, const std::string& query, const std::string& replace);
@@ -57,25 +57,25 @@ void rtrim(std::string& s);
 void replaceAll(State* state, const std::string& query, const std::string& replace);
 bool setSearchResultReverse(State* state);
 void fixColOverMax(State* state);
-WordPosition findQuoteBounds(const std::string& str, char quoteChar, unsigned int cursor, bool includeQuote);
+WordPosition findQuoteBounds(const std::string& str, char quoteChar, uint32_t cursor, bool includeQuote);
 bool setSearchResult(State* state);
 void setPosition(State* state, Position pos);
 void initVisual(State* state, VisualType visualType);
 bool is_number(const std::string& s);
-WordPosition findParentheses(const std::string& str, char openParen, char closeParen, unsigned int cursor, bool includeParen);
-unsigned int getIndent(const std::string& str);
-unsigned int getNextLineSameIndent(State* state);
-unsigned int getPrevLineSameIndent(State* state);
-WordPosition getBigWordPosition(const std::string& str, unsigned int cursor);
-WordPosition getWordPosition(const std::string& str, unsigned int cursor);
+WordPosition findParentheses(const std::string& str, char openParen, char closeParen, uint32_t cursor, bool includeParen);
+uint32_t getIndent(const std::string& str);
+uint32_t getNextLineSameIndent(State* state);
+uint32_t getPrevLineSameIndent(State* state);
+WordPosition getBigWordPosition(const std::string& str, uint32_t cursor);
+WordPosition getWordPosition(const std::string& str, uint32_t cursor);
 std::vector<grepMatch> grepFiles(const std::filesystem::path& dir_path, const std::string& query);
 void generateGrepOutput(State* state);
 bool filePathContainsSubstring(const std::filesystem::path& filePath, const std::string& query);
 bool shouldIgnoreFile(const std::filesystem::path& path);
 std::vector<std::filesystem::path> findFiles(const std::filesystem::path& dir_path, const std::string& query);
 void generateFindFileOutput(State* state);
-unsigned int w(State* state);
-unsigned int b(State* state);
+uint32_t w(State* state);
+uint32_t b(State* state);
 void insertEmptyLineBelow(State* state);
 void indent(State* state);
 void deindent(State* state);
@@ -94,8 +94,8 @@ void upHalfScreen(State* state);
 char ctrl(char c);
 char unctrl(char c);
 void calcWindowBounds();
-int getIndexFirstNonSpace(State* state);
+int32_t getIndexFirstNonSpace(State* state);
 void sanityCheckRowColOutOfBounds(State* state);
 void sanityCheckDocumentEmpty(State* state);
-int minimum(int a, int b);
-int maximum(int a, int b);
+int32_t minimum(int32_t a, int32_t b);
+int32_t maximum(int32_t a, int32_t b);
diff --git a/src/util/history.cpp b/src/util/history.cpp
index de58ffc..f79c156 100644
--- a/src/util/history.cpp
+++ b/src/util/history.cpp
@@ -5,15 +5,15 @@
 #include <string>
 #include <vector>
 
-unsigned int applyDiff(State* state, std::vector<diffLine> diff, bool reverse) {
+uint32_t applyDiff(State* state, std::vector<diffLine> diff, bool reverse) {
     std::sort(diff.begin(), diff.end(), [reverse](const diffLine& a, const diffLine& b) {
         if (b.add == a.add) {
             return a.lineNum < b.lineNum;
         }
         return reverse ? b.add < a.add : a.add < b.add;
     });
-    int offsetNeg = 0;
-    unsigned int min = UINT_MAX;
+    int32_t offsetNeg = 0;
+    uint32_t min = UINT_MAX;
     for (const auto& dl : diff) {
         if ((!reverse && dl.add) || (reverse && !dl.add)) {
             if (dl.lineNum < min) {
@@ -28,7 +28,7 @@ unsigned int applyDiff(State* state, std::vector<diffLine> diff, bool reverse) {
             if (dl.lineNum + offsetNeg < min) {
                 min = dl.lineNum + offsetNeg;
             }
-            if ((int)dl.lineNum + offsetNeg < static_cast<int>(state->data.size())) {
+            if ((int32_t)dl.lineNum + offsetNeg < static_cast<int32_t>(state->data.size())) {
                 state->data.erase(state->data.begin() + dl.lineNum + offsetNeg);
             }
             offsetNeg--;
@@ -37,15 +37,15 @@ unsigned int applyDiff(State* state, std::vector<diffLine> diff, bool reverse) {
     return min;
 }
 
-std::vector<diffLine> backtrack(const std::vector<std::vector<int>>& trace, const std::vector<std::string>& a, const std::vector<std::string>& b, int max) {
+std::vector<diffLine> backtrack(const std::vector<std::vector<int32_t>>& trace, const std::vector<std::string>& a, const std::vector<std::string>& b, int32_t max) {
     std::vector<diffLine> diff;
-    int x = a.size();
-    int y = b.size();
-    int offset = max;
+    int32_t x = a.size();
+    int32_t y = b.size();
+    int32_t offset = max;
 
-    for (int d = static_cast<int>(trace.size()) - 1, k, prev_k, prev_x, prev_y; x > 0 || y > 0; --d) {
+    for (int32_t d = static_cast<int32_t>(trace.size()) - 1, k, prev_k, prev_x, prev_y; x > 0 || y > 0; --d) {
         k = x - y;
-        int vk = offset + k;
+        int32_t vk = offset + k;
 
         if (k == -d || (k != d && trace[d][vk - 1] < trace[d][vk + 1])) {
             prev_k = k + 1;
@@ -61,9 +61,9 @@ std::vector<diffLine> backtrack(const std::vector<std::vector<int>>& trace, cons
             y--;
         }
         if (x > prev_x && x != 0) {
-            diff.insert(diff.begin(), diffLine{static_cast<unsigned int>(x - 1), false, a[x - 1]});
+            diff.insert(diff.begin(), diffLine{static_cast<uint32_t>(x - 1), false, a[x - 1]});
         } else if (y > prev_y && y != 0) {
-            diff.insert(diff.begin(), diffLine{static_cast<unsigned int>(y - 1), true, b[y - 1]});
+            diff.insert(diff.begin(), diffLine{static_cast<uint32_t>(y - 1), true, b[y - 1]});
         }
 
         x = prev_x;
@@ -74,19 +74,19 @@ std::vector<diffLine> backtrack(const std::vector<std::vector<int>>& trace, cons
 }
 
 std::vector<diffLine> generateDiff(const std::vector<std::string>& a, const std::vector<std::string>& b) {
-    int n = a.size();
-    int m = b.size();
-    int max = n + m;
-    std::vector<int> v(2 * max + 1);
-    std::vector<std::vector<int>> trace;
+    int32_t n = a.size();
+    int32_t m = b.size();
+    int32_t max = n + m;
+    std::vector<int32_t> v(2 * max + 1);
+    std::vector<std::vector<int32_t>> trace;
 
-    for (int d = 0; d <= max; ++d) {
-        for (int k = -d; k <= d; k += 2) {
-            int index = k + max;
+    for (int32_t d = 0; d <= max; ++d) {
+        for (int32_t k = -d; k <= d; k += 2) {
+            int32_t index = k + max;
 
-            int x = (k == -d || (k != d && v[index - 1] < v[index + 1])) ? v[index + 1] : v[index - 1] + 1;
+            int32_t x = (k == -d || (k != d && v[index - 1] < v[index + 1])) ? v[index + 1] : v[index - 1] + 1;
 
-            int y = x - k;
+            int32_t y = x - k;
 
             while (x < n && y < m && a[x] == b[y]) {
                 x++;
@@ -107,8 +107,8 @@ std::vector<diffLine> generateDiff(const std::vector<std::string>& a, const std:
 
 std::vector<diffLine> generateFastDiff(const std::vector<std::string>& a, const std::vector<std::string>& b) {
     std::vector<diffLine> output;
-    unsigned int aIndex = 0;
-    unsigned int bIndex = 0;
+    uint32_t aIndex = 0;
+    uint32_t bIndex = 0;
     while (aIndex < a.size() && bIndex < b.size()) {
         if (aIndex >= a.size()) {
             output.push_back({ aIndex, false, a[aIndex] });
diff --git a/src/util/history.h b/src/util/history.h
index 8e03e32..3cfef33 100644
--- a/src/util/history.h
+++ b/src/util/history.h
@@ -4,6 +4,6 @@
 #include <string>
 #include <vector>
 
-unsigned int applyDiff(State* state, std::vector<diffLine> diff, bool reverse);
+uint32_t applyDiff(State* state, std::vector<diffLine> diff, bool reverse);
 std::vector<diffLine> generateDiff(const std::vector<std::string>& prev, const std::vector<std::string>& curr);
 std::vector<diffLine> generateFastDiff(const std::vector<std::string>& prev, const std::vector<std::string>& curr);
\ No newline at end of file
diff --git a/src/util/indent.cpp b/src/util/indent.cpp
index ec6601f..fba6cc8 100644
--- a/src/util/indent.cpp
+++ b/src/util/indent.cpp
@@ -4,9 +4,9 @@
 #include <string>
 #include <vector>
 
-int getNumLeadingSpaces(std::string s) {
-    int numSpaces = 0;
-    for (unsigned int i = 0; i < s.length(); i++) {
+int32_t getNumLeadingSpaces(std::string s) {
+    int32_t numSpaces = 0;
+    for (uint32_t i = 0; i < s.length(); i++) {
         if (s[i] == ' ') {
             numSpaces++;
         } else {
@@ -16,8 +16,8 @@ int getNumLeadingSpaces(std::string s) {
     return numSpaces;
 }
 
-std::string getPrevLine(State* state, unsigned int row) {
-    for (int i = row - 1; i >= 0; i--) {
+std::string getPrevLine(State* state, uint32_t row) {
+    for (int32_t i = row - 1; i >= 0; i--) {
         if (state->data[i] != "") {
             return state->data[i];
         }
@@ -51,17 +51,17 @@ enum TagType {
     CLOSE,
 };
 
-int getIndentLevel(State* state, unsigned int row) {
+int32_t getIndentLevel(State* state, uint32_t row) {
     std::string prevLine = getPrevLine(state, row);
     prevLine = trimComment(state, prevLine);
     std::string currLine = state->data[row];
     ltrim(currLine);
-    int indentLevel = getNumLeadingSpaces(prevLine);
+    int32_t indentLevel = getNumLeadingSpaces(prevLine);
 
     if (hasHTML(prevLine, getExtension(state->filename))) {
-        int tagType = EMPTY;
-        int tagStack = 0;
-        for (unsigned int i = 0; i < prevLine.length(); i++) {
+        int32_t tagType = EMPTY;
+        int32_t tagStack = 0;
+        for (uint32_t i = 0; i < prevLine.length(); i++) {
             if (tagType == EMPTY && prevLine[i] == '<') {
                 if (i + 1 < prevLine.length() && prevLine[i + 1] == '/') {
                     tagType = CLOSE;
@@ -87,7 +87,7 @@ int getIndentLevel(State* state, unsigned int row) {
             indentLevel += state->indent;
         }
     } else {
-        for (unsigned int i = 0; i < prevLine.length(); i++) {
+        for (uint32_t i = 0; i < prevLine.length(); i++) {
             if (prevLine.substr(i, state->commentSymbol.length()) == state->commentSymbol) {
                 break;
             } else if (prevLine[i] == '(' || prevLine[i] == '{' || prevLine[i] == '[') {
@@ -99,9 +99,9 @@ int getIndentLevel(State* state, unsigned int row) {
     }
 
     if (hasHTML(currLine, getExtension(state->filename))) {
-        int tagType = EMPTY;
-        int tagStack = 0;
-        for (unsigned int i = 0; i < currLine.length(); i++) {
+        int32_t tagType = EMPTY;
+        int32_t tagStack = 0;
+        for (uint32_t i = 0; i < currLine.length(); i++) {
             if (tagType == EMPTY && currLine[i] == '<') {
                 if (i + 1 < currLine.length() && currLine[i + 1] == '/') {
                     tagType = CLOSE;
@@ -124,7 +124,7 @@ int getIndentLevel(State* state, unsigned int row) {
             indentLevel -= state->indent;
         }
     } else {
-        for (unsigned int i = 0; i < currLine.length(); i++) {
+        for (uint32_t i = 0; i < currLine.length(); i++) {
             if (currLine.substr(i, state->commentSymbol.length()) == state->commentSymbol) {
                 break;
             } else if (currLine[i] == ')' || currLine[i] == '}' || currLine[i] == ']') {
@@ -138,11 +138,11 @@ int getIndentLevel(State* state, unsigned int row) {
     return indentLevel;
 }
 
-void indentLine(State* state, unsigned int row) {
+void indentLine(State* state, uint32_t row) {
     ltrim(state->data[row]);
     if (state->data[row].length() != 0) {
-        int indentLevel = getIndentLevel(state, row);
-        for (int i = 0; i < indentLevel; i++) {
+        int32_t indentLevel = getIndentLevel(state, row);
+        for (int32_t i = 0; i < indentLevel; i++) {
             state->data[row] = ' ' + state->data[row];
         }
     }
@@ -151,34 +151,34 @@ void indentLine(State* state, unsigned int row) {
 void indentLine(State* state) {
     ltrim(state->data[state->row]);
     if (state->data[state->row].length() != 0) {
-        int indentLevel = getIndentLevel(state, state->row);
-        for (int i = 0; i < indentLevel; i++) {
+        int32_t indentLevel = getIndentLevel(state, state->row);
+        for (int32_t i = 0; i < indentLevel; i++) {
             state->data[state->row] = ' ' + state->data[state->row];
         }
     }
 }
 
 void indentRange(State* state) {
-    unsigned int firstNonEmptyRow = state->row;
-    for (int i = state->row; i <= (int)state->visual.row; i++) {
+    uint32_t firstNonEmptyRow = state->row;
+    for (int32_t i = state->row; i <= (int32_t)state->visual.row; i++) {
         if (state->data[i] != "") {
             firstNonEmptyRow = i;
             break;
         }
     }
-    int indentDifference = getIndentLevel(state, state->row) - getNumLeadingSpaces(state->data[firstNonEmptyRow]);
+    int32_t indentDifference = getIndentLevel(state, state->row) - getNumLeadingSpaces(state->data[firstNonEmptyRow]);
     if (indentDifference > 0) {
-        for (int i = state->row; i <= (int)state->visual.row; i++) {
+        for (int32_t i = state->row; i <= (int32_t)state->visual.row; i++) {
             if (state->data[i] != "") {
-                for (int j = 0; j < indentDifference; j++) {
+                for (int32_t j = 0; j < indentDifference; j++) {
                     state->data[i] = ' ' + state->data[i];
                 }
             }
         }
     } else if (indentDifference < 0) {
-        for (int i = state->row; i <= (int)state->visual.row; i++) {
+        for (int32_t i = state->row; i <= (int32_t)state->visual.row; i++) {
             if (state->data[i] != "") {
-                for (int j = 0; j < -1 * indentDifference; j++) {
+                for (int32_t j = 0; j < -1 * indentDifference; j++) {
                     if (state->data[i].length() > 0 && state->data[i][0] == ' ') {
                         state->data[i] = safeSubstring(state->data[i], 1);
                     }
diff --git a/src/util/indent.h b/src/util/indent.h
index e72dfe8..8bb415e 100644
--- a/src/util/indent.h
+++ b/src/util/indent.h
@@ -4,9 +4,9 @@
 #include <string>
 #include <vector>
 
-int getNumLeadingSpaces(std::string s);
-std::string getPrevLine(State* state, unsigned int row);
-int getIndentLevel(State* state, unsigned int row);
-void indentLine(State* state, unsigned int row);
+int32_t getNumLeadingSpaces(std::string s);
+std::string getPrevLine(State* state, uint32_t row);
+int32_t getIndentLevel(State* state, uint32_t row);
+void indentLine(State* state, uint32_t row);
 void indentLine(State* state);
 void indentRange(State* state);
diff --git a/src/util/insertLoggingCode.cpp b/src/util/insertLoggingCode.cpp
index 8060ee0..1036e7a 100644
--- a/src/util/insertLoggingCode.cpp
+++ b/src/util/insertLoggingCode.cpp
@@ -38,7 +38,7 @@ std::string getLoggingRegex(State* state) {
 void removeAllLoggingCode(State* state) {
     std::string logPattern = getLoggingRegex(state);
     if (logPattern != "") {
-        for (int i = state->data.size() - 1; i >= 0; i--) {
+        for (int32_t i = state->data.size() - 1; i >= 0; i--) {
             if (std::regex_search(state->data[i], std::regex(logPattern))) {
                 state->data.erase(state->data.begin() + i);
             }
@@ -55,7 +55,7 @@ std::string replaceAll(std::string str, const std::string& from, const std::stri
     return str;
 }
 
-std::string getLoggingCode(State* state, unsigned int row, std::string variableName, bool showValue) {
+std::string getLoggingCode(State* state, uint32_t row, std::string variableName, bool showValue) {
     std::string extension = getExtension(state->filename);
     std::string rowStr = std::to_string(row + 1);
     if (extension == "cpp") {
diff --git a/src/util/insertLoggingCode.h b/src/util/insertLoggingCode.h
index c5129d4..5ebbf51 100644
--- a/src/util/insertLoggingCode.h
+++ b/src/util/insertLoggingCode.h
@@ -5,6 +5,6 @@
 #include <vector>
 
 void toggleLoggingCode(State* state, std::string variableName, bool showValue);
-std::string getLoggingCode(State* state, unsigned int row, std::string variableName, bool showValue);
+std::string getLoggingCode(State* state, uint32_t row, std::string variableName, bool showValue);
 void removeAllLoggingCode(State* state);
 std::string getLoggingRegex(State* state);
diff --git a/src/util/name.cpp b/src/util/name.cpp
index 838e154..475bd43 100644
--- a/src/util/name.cpp
+++ b/src/util/name.cpp
@@ -6,7 +6,7 @@ std::string inputName(State* state, std::string startingValue) {
     backspaceAll(&state->name);
     setQuery(&state->name, startingValue);
     renderScreen(state);
-    int c;
+    int32_t c;
     while (true) {
         c = getch();
         if (c != ERR) {
diff --git a/src/util/render.cpp b/src/util/render.cpp
index b9bda66..7e34735 100644
--- a/src/util/render.cpp
+++ b/src/util/render.cpp
@@ -39,28 +39,28 @@
 #define LEFT_STATUS_BORDER 10
 #define RIGHT_STATUS_BORDER 20
 
-int invertColor(int color) { return color + 11; }
+int32_t invertColor(int32_t color) { return color + 11; }
 
 // is there a better way for arg passing?
-void mvprintw_color(int r, int c, const char* formatString, const char* cstring1, int num, const char* cstring2, int color) {
+void mvprintw_color(int32_t r, int32_t c, const char* formatString, const char* cstring1, int32_t num, const char* cstring2, int32_t color) {
     attron(COLOR_PAIR(color));
     mvprintw(r, c, formatString, cstring1, num, cstring2);
     attroff(COLOR_PAIR(color));
 }
 
-void mvprintw_color(int r, int c, const char* formatString, int num, int color) {
+void mvprintw_color(int32_t r, int32_t c, const char* formatString, int32_t num, int32_t color) {
     attron(COLOR_PAIR(color));
     mvprintw(r, c, formatString, num);
     attroff(COLOR_PAIR(color));
 }
 
-void mvprintw_color(int r, int c, const char* formatString, const char* cstring, int color) {
+void mvprintw_color(int32_t r, int32_t c, const char* formatString, const char* cstring, int32_t color) {
     attron(COLOR_PAIR(color));
     mvprintw(r, c, formatString, cstring);
     attroff(COLOR_PAIR(color));
 }
 
-void mvaddch_color(int r, int c, char ch, int color) {
+void mvaddch_color(int32_t r, int32_t c, char ch, int32_t color) {
     attron(COLOR_PAIR(color));
     mvaddch(r, c, ch);
     attroff(COLOR_PAIR(color));
@@ -92,8 +92,8 @@ void initColors() {
     init_pair(invertColor(DARKGREEN), _COLOR_BLACK, _COLOR_DARKGREEN);
 }
 
-void renderNumMatches(int offset, int selection, int total) {
-    int index = offset;
+void renderNumMatches(int32_t offset, int32_t selection, int32_t total) {
+    int32_t index = offset;
     mvprintw_color(0, index, "%d", selection, WHITE);
     index += std::to_string(selection).length();
     mvprintw_color(0, index, " of ", "", WHITE);
@@ -102,9 +102,9 @@ void renderNumMatches(int offset, int selection, int total) {
     index += std::to_string(total).length();
 }
 
-int renderStatusBar(State* state) {
-    int cursor = -1;
-    int offset = 0;
+int32_t renderStatusBar(State* state) {
+    int32_t cursor = -1;
+    int32_t offset = 0;
 
     if (state->status.length() > 0) {
         mvprintw_color(0, (state->maxX / 2) - (state->status.length() / 2), "%s", state->status.c_str(), RED);
@@ -147,11 +147,11 @@ int renderStatusBar(State* state) {
     } else {
         if (state->harpoonIndex < state->harpoonFiles.size()) {
             auto min_name = minimize_filename(state->harpoonFiles[state->harpoonIndex]);
-            int left = (state->maxX / 2) - (min_name.length() / 2);
-            int right = left + min_name.length();
+            int32_t left = (state->maxX / 2) - (min_name.length() / 2);
+            int32_t right = left + min_name.length();
             mvprintw_color(0, left, "%s", min_name.c_str(), state->harpoonFiles[state->harpoonIndex] == state->filename ? YELLOW : GREY);
             std::string renderString = "";
-            for (unsigned int i = state->harpoonIndex + 1; i < state->harpoonFiles.size(); i++) {
+            for (uint32_t i = state->harpoonIndex + 1; i < state->harpoonFiles.size(); i++) {
                 min_name = minimize_filename(state->harpoonFiles[i]);
                 renderString += "  " + min_name;
             }
@@ -161,7 +161,7 @@ int renderStatusBar(State* state) {
             }
             mvprintw_color(0, right, "%s", renderString.c_str(), GREY);
             renderString = "";
-            for (int i = state->harpoonIndex - 1; i >= 0; i--) {
+            for (int32_t i = state->harpoonIndex - 1; i >= 0; i--) {
                 min_name = minimize_filename(state->harpoonFiles[i]);
                 renderString = min_name + "  " + renderString;
             }
@@ -196,13 +196,13 @@ int renderStatusBar(State* state) {
         }
     }
     if (state->showFileStack == true) {
-        for (int i = (int)(state->fileStack.size() - 1); i >= 0; i--) {
+        for (int32_t i = (int32_t)(state->fileStack.size() - 1); i >= 0; i--) {
             mvprintw_color(
                 state->fileStack.size() - i - 1,
                 state->maxX - state->fileStack[i].length() - 2,
                 "\"%s\"",
                 state->fileStack[i].c_str(),
-                i == (int)state->fileStackIndex ? RED : WHITE
+                i == (int32_t)state->fileStackIndex ? RED : WHITE
             );
         }
     } else {
@@ -230,7 +230,7 @@ std::string minimize_filename(const std::string& filename) {
     return minimized;
 }
 
-int getColorFromChar(char c) {
+int32_t getColorFromChar(char c) {
     if (c == '[' || c == ']') {
         return GREEN;
     } else if (c == '(' || c == ')') {
@@ -244,8 +244,8 @@ int getColorFromChar(char c) {
     }
 }
 
-int getSearchColor(State* state, int row, unsigned int startOfSearch, std::string query, bool grep) {
-    if (state->row == (unsigned int)row && startOfSearch + query.length() >= state->col && startOfSearch <= state->col) {
+int32_t getSearchColor(State* state, int32_t row, uint32_t startOfSearch, std::string query, bool grep) {
+    if (state->row == (uint32_t)row && startOfSearch + query.length() >= state->col && startOfSearch <= state->col) {
         return invertColor(grep ? GREEN : MAGENTA);
     } else {
         return invertColor(grep ? DARKGREEN : CYAN);
@@ -264,11 +264,11 @@ bool isMergeConflict(const std::string& str) {
     return false;
 }
 
-void printChar(State* state, int row, int col, char c, int color) {
+void printChar(State* state, int32_t row, int32_t col, char c, int32_t color) {
     if (' ' <= c && c <= '~') {
         mvaddch_color(row, col + getLineNumberOffset(state), c, color);
     } else if (c == '\t') {
-        for (unsigned int i = 0; i < state->indent; i++) {
+        for (uint32_t i = 0; i < state->indent; i++) {
             mvaddch_color(row, col + getLineNumberOffset(state), ' ', color);
         }
     } else if (' ' <= unctrl(c) && unctrl(c) <= '~') {
@@ -278,11 +278,11 @@ void printChar(State* state, int row, int col, char c, int color) {
     }
 }
 
-void printChar(State* state, int& row, int& col, char c, int color, bool advance) {
+void printChar(State* state, int& row, int& col, char c, int32_t color, bool advance) {
     if (' ' <= c && c <= '~') {
         mvaddch_color(row, col + getLineNumberOffset(state), c, color);
     } else if (c == '\t') {
-        for (unsigned int i = 0; i < state->indent; i++) {
+        for (uint32_t i = 0; i < state->indent; i++) {
             mvaddch_color(row, col + getLineNumberOffset(state), ' ', color);
             advancePosition(state, row, col);
         }
@@ -297,12 +297,12 @@ void printChar(State* state, int& row, int& col, char c, int color, bool advance
     }
 }
 
-bool isRowColInVisual(State* state, unsigned int i, unsigned int j) {
+bool isRowColInVisual(State* state, uint32_t i, uint32_t j) {
     if (state->mode == VISUAL) {
-        unsigned int minR;
-        unsigned int minC;
-        unsigned int maxR;
-        unsigned int maxC;
+        uint32_t minR;
+        uint32_t minC;
+        uint32_t maxR;
+        uint32_t maxC;
         if (state->row < state->visual.row) {
             minR = state->row;
             minC = state->col;
@@ -337,7 +337,7 @@ bool isRowColInVisual(State* state, unsigned int i, unsigned int j) {
     return false;
 }
 
-bool isInQuery(State* state, unsigned int row, unsigned int col, std::string query) {
+bool isInQuery(State* state, uint32_t row, uint32_t col, std::string query) {
     if (query != "" && col + query.length() <= state->data[row].length()) {
         if (query == state->data[row].substr(col, query.length())) {
             return true;
@@ -346,13 +346,13 @@ bool isInQuery(State* state, unsigned int row, unsigned int col, std::string que
     return false;
 }
 
-bool isRowInVisual(State* state, int row) { return ((int)state->visual.row <= row && row <= (int)state->row) || ((int)state->row <= row && row <= (int)state->visual.row); }
+bool isRowInVisual(State* state, int32_t row) { return ((int32_t)state->visual.row <= row && row <= (int32_t)state->row) || ((int32_t)state->row <= row && row <= (int32_t)state->visual.row); }
 
-unsigned int renderAutoComplete(State* state, unsigned int renderRow, unsigned int renderCol) {
+uint32_t renderAutoComplete(State* state, uint32_t renderRow, uint32_t renderCol) {
     if (state->mode == TYPING || state->mode == MULTICURSOR) {
         std::string completion = autocomplete(state, getCurrentWord(state));
         if (state->col + 1 >= state->data[state->row].length() || !isAlphanumeric(state->data[state->row][state->col])) {
-            for (unsigned int i = 0; i < completion.length(); i++) {
+            for (uint32_t i = 0; i < completion.length(); i++) {
                 printChar(state, renderRow, renderCol + i, completion[i], GREY);
             }
             return completion.length();
@@ -362,15 +362,15 @@ unsigned int renderAutoComplete(State* state, unsigned int renderRow, unsigned i
 }
 
 void renderGrepOutput(State* state) {
-    unsigned int index;
-    if ((int)state->grep.selection - ((int)state->maxY / 2) > 0) {
+    uint32_t index;
+    if ((int32_t)state->grep.selection - ((int32_t)state->maxY / 2) > 0) {
         index = state->grep.selection - state->maxY / 2;
     } else {
         index = 0;
     }
-    unsigned int renderIndex = 1;
-    int color;
-    for (unsigned int i = index; i < state->grepOutput.size() && i < index + state->maxY; i++) {
+    uint32_t renderIndex = 1;
+    int32_t color;
+    for (uint32_t i = index; i < state->grepOutput.size() && i < index + state->maxY; i++) {
         color = isTestFile(state->grepOutput[i].path.string()) ? ORANGE : WHITE;
         mvprintw_color(
             renderIndex,
@@ -386,15 +386,15 @@ void renderGrepOutput(State* state) {
 }
 
 void renderFindFileOutput(State* state) {
-    unsigned int index;
-    if ((int)state->findFile.selection - ((int)state->maxY / 2) > 0) {
+    uint32_t index;
+    if ((int32_t)state->findFile.selection - ((int32_t)state->maxY / 2) > 0) {
         index = state->findFile.selection - state->maxY / 2;
     } else {
         index = 0;
     }
-    unsigned int renderIndex = 1;
-    int color;
-    for (unsigned int i = index; i < state->findFileOutput.size() && i < index + state->maxY; i++) {
+    uint32_t renderIndex = 1;
+    int32_t color;
+    for (uint32_t i = index; i < state->findFileOutput.size() && i < index + state->maxY; i++) {
         color = isTestFile(state->findFileOutput[i]) ? ORANGE : WHITE;
         mvprintw_color(
             renderIndex,
@@ -407,8 +407,8 @@ void renderFindFileOutput(State* state) {
     }
 }
 
-std::string getRenderBlameString(State* state, int i) {
-    if (state->mode == BLAME && state->blame.size() >= state->data.size() && i < (int)state->data.size()) {
+std::string getRenderBlameString(State* state, int32_t i) {
+    if (state->mode == BLAME && state->blame.size() >= state->data.size() && i < (int32_t)state->data.size()) {
         return state->blame[i];
     } else {
         return "";
@@ -417,17 +417,17 @@ std::string getRenderBlameString(State* state, int i) {
 
 Cursor renderVisibleLines(State* state) {
     Cursor cursor{-1, -1};
-    int currentRenderRow = 1;
-    for (int i = state->windowPosition.row; i < (int)state->data.size() && i < (int)(state->maxY + state->windowPosition.row) - 1; i++) {
+    int32_t currentRenderRow = 1;
+    for (int32_t i = state->windowPosition.row; i < (int32_t)state->data.size() && i < (int32_t)(state->maxY + state->windowPosition.row) - 1; i++) {
         printLineNumber(state, i, currentRenderRow);
         currentRenderRow = printLineContent(state, i, currentRenderRow, &cursor);
     }
     return cursor;
 }
 
-void printLineNumber(State* state, int row, int renderRow) {
-    int border = state->fileExplorerOpen ? state->fileExplorerSize : 0;
-    if (row == (int)state->row) {
+void printLineNumber(State* state, int32_t row, int32_t renderRow) {
+    int32_t border = state->fileExplorerOpen ? state->fileExplorerSize : 0;
+    if (row == (int32_t)state->row) {
         mvprintw_color(renderRow, border, "%5d", row + 1, WHITE);
     } else if (state->recording) {
         mvprintw_color(renderRow, border, "%5d", row + 1, RED);
@@ -436,8 +436,8 @@ void printLineNumber(State* state, int row, int renderRow) {
     }
     bool isLogging = getLoggingRegex(state) != "" && std::regex_search(state->data[row], std::regex(getLoggingRegex(state)));
     bool endsWithSpace = state->data[row].back() == ' ';
-    bool isOnMark = (int)state->mark.mark == row && state->mark.filename == state->filename;
-    int color = BLACK;
+    bool isOnMark = (int32_t)state->mark.mark == row && state->mark.filename == state->filename;
+    int32_t color = BLACK;
     if (endsWithSpace && state->mode != TYPING) {
         color = RED;
     } else if (isLogging) {
@@ -447,12 +447,12 @@ void printLineNumber(State* state, int row, int renderRow) {
     }
     mvprintw_color(renderRow, border + 5, "%c", '|', color);
     if (state->mode == BLAME) {
-        mvprintw_color(renderRow, border + 6, "%-65s", getRenderBlameString(state, row).substr(0, 65).c_str(), row == (int)state->row ? invertColor(WHITE) : WHITE);
+        mvprintw_color(renderRow, border + 6, "%-65s", getRenderBlameString(state, row).substr(0, 65).c_str(), row == (int32_t)state->row ? invertColor(WHITE) : WHITE);
     }
 }
 
 void advancePosition(State* state, int& renderRow, int& renderCol) {
-    if (state->wordwrap && (unsigned int)renderCol + 1 >= state->maxX - getLineNumberOffset(state)) {
+    if (state->wordwrap && (uint32_t)renderCol + 1 >= state->maxX - getLineNumberOffset(state)) {
         renderRow++;
         renderCol = 0;
     } else {
@@ -460,23 +460,23 @@ void advancePosition(State* state, int& renderRow, int& renderCol) {
     }
 }
 
-int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
+int32_t printLineContent(State* state, int32_t row, int32_t renderRow, Cursor* cursor) {
     if (isRowColInVisual(state, row, 0) == true && state->data[row].length() == 0) {
         printChar(state, renderRow, 0, ' ', invertColor(WHITE));
-        if (state->row == (unsigned int)row) {
+        if (state->row == (uint32_t)row) {
             cursor->row = renderRow - 1;
             cursor->col = 0;
         }
     } else {
         bool isInString = false;
         bool skipNext = false;
-        unsigned int searchCounter = 0;
-        int renderCol = 0;
-        unsigned int startOfSearch = 0;
+        uint32_t searchCounter = 0;
+        int32_t renderCol = 0;
+        uint32_t startOfSearch = 0;
         bool isComment = false;
         char stringType;
-        unsigned int col = 0;
-        unsigned int completionLength = 0;
+        uint32_t col = 0;
+        uint32_t completionLength = 0;
         while (col < state->data[row].length()) {
             if (state->showGrep) {
                 if (searchCounter == 0 && isInQuery(state, row, col, state->grep.query)) {
@@ -509,15 +509,15 @@ int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
             }
             if (col >= state->windowPosition.col) {
                 if (state->replacing && searchCounter != 0) {
-                    for (unsigned int i = 0; i < state->replace.query.length(); i++) {
+                    for (uint32_t i = 0; i < state->replace.query.length(); i++) {
                         printChar(state, renderRow, renderCol, state->replace.query[i], getSearchColor(state, row, startOfSearch, state->search.query, false), true);
                     }
                     col += state->search.query.length();
                     searchCounter = 0;
                 } else {
                     // TODO make this a getColor function();, lots of logic in here that's messy
-                    int color;
-                    if (state->matching.row == (unsigned int)row && state->matching.col == col && (state->matching.row != state->row || state->matching.col != state->col)) {
+                    int32_t color;
+                    if (state->matching.row == (uint32_t)row && state->matching.col == col && (state->matching.row != state->row || state->matching.col != state->col)) {
                         color = invertColor(GREY);
                     } else {
                         if (state->showGrep && searchCounter != 0) {
@@ -539,7 +539,7 @@ int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
                             }
                         }
                     }
-                    if (state->row == (unsigned int)row && state->col == col) {
+                    if (state->row == (uint32_t)row && state->col == col) {
                         cursor->row = renderRow - 1;
                         cursor->col = renderCol;
                         if (completionLength != 0) {
@@ -549,7 +549,7 @@ int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
                     }
                     printChar(state, renderRow, renderCol, state->data[row][col], color, true);
                     col++;
-                    if (state->row == (unsigned int)row && state->col == col) {
+                    if (state->row == (uint32_t)row && state->col == col) {
                         completionLength = renderAutoComplete(state, renderRow, renderCol);
                     }
                 }
@@ -561,7 +561,7 @@ int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
             }
         }
         if (state->col >= state->data[row].length()) {
-            if (state->row == (unsigned int)row) {
+            if (state->row == (uint32_t)row) {
                 cursor->row = renderRow - 1;
                 cursor->col = renderCol;
             }
@@ -570,7 +570,7 @@ int printLineContent(State* state, int row, int renderRow, Cursor* cursor) {
     return renderRow + 1;
 }
 
-void moveCursor(State* state, int cursorOnStatusBar, Cursor editorCursor, Cursor fileExplorerCursor) {
+void moveCursor(State* state, int32_t cursorOnStatusBar, Cursor editorCursor, Cursor fileExplorerCursor) {
     if (cursorOnStatusBar != -1) {
         move(0, cursorOnStatusBar);
     } else if (state->mode == FILEEXPLORER) {
@@ -580,8 +580,8 @@ void moveCursor(State* state, int cursorOnStatusBar, Cursor editorCursor, Cursor
     }
 }
 
-int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::string startingSpaces, bool isFileExplorerOpen, int fileExplorerWindowLine, int fileExplorerSize, Cursor &cursor) {
-    int color;
+int32_t renderFileExplorerNode(FileExplorerNode* node, int32_t r, int32_t selectedRow, std::string startingSpaces, bool isFileExplorerOpen, int32_t fileExplorerWindowLine, int32_t fileExplorerSize, Cursor &cursor) {
+    int32_t color;
     if (shouldIgnoreFile(node->path)) {
         color = GREY;
     } else if (node->isFolder) {
@@ -589,8 +589,8 @@ int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::
     } else {
         color = WHITE;
     }
-    int row = r + 1;
-    int offset = 0;
+    int32_t row = r + 1;
+    int32_t offset = 0;
     if (row - fileExplorerWindowLine > 0) {
         auto displayRow = row - fileExplorerWindowLine;
         mvprintw_color(displayRow, offset, "%s", startingSpaces.c_str(), WHITE);
@@ -608,7 +608,7 @@ int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::
             displayRow,
             offset,
             (std::string("%-") + std::to_string(fileExplorerSize - offset - 1) + std::string("s")).c_str(),
-            (int)node->name.length() >= fileExplorerSize - offset - 1
+            (int32_t)node->name.length() >= fileExplorerSize - offset - 1
                 ? (node->name.substr(0, fileExplorerSize - 3 - offset - 1) + "...").c_str()
                 : node->name.substr(0, fileExplorerSize - offset - 1).c_str(),
             color
@@ -616,7 +616,7 @@ int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::
         offset += node->name.substr(0, fileExplorerSize - offset - 1).length();
     }
     if (node->isOpen) {
-        for(unsigned int i = 0; i < node->children.size(); i++) {
+        for(uint32_t i = 0; i < node->children.size(); i++) {
             row = renderFileExplorerNode(&node->children[i], row, selectedRow, startingSpaces + "  ", isFileExplorerOpen, fileExplorerWindowLine, fileExplorerSize, cursor);
         }
     }
@@ -647,7 +647,7 @@ void renderScreen(State* state) {
             fileExplorerCursor = renderFileExplorer(state);
         }
     }
-    int cursorOnStatusBar = renderStatusBar(state);
+    int32_t cursorOnStatusBar = renderStatusBar(state);
     moveCursor(state, cursorOnStatusBar, editorCursor, fileExplorerCursor);
     wnoutrefresh(stdscr);
     doupdate();
diff --git a/src/util/render.h b/src/util/render.h
index 0a53cd3..68edbb9 100644
--- a/src/util/render.h
+++ b/src/util/render.h
@@ -5,24 +5,24 @@
 #include <string>
 
 struct Cursor {
-    int row;
-    int col;
+    int32_t row;
+    int32_t col;
 };
 
 std::string minimize_filename(const std::string& filename);
-int invertColor(int color);
+int32_t invertColor(int32_t color);
 void initColors();
-int renderStatusBar(State* state);
+int32_t renderStatusBar(State* state);
 Cursor renderVisibleLines(State* state);
 void renderScreen(State* state);
 void renderScreen(State* state, bool fullRedraw);
 void initTerminal();
 void advancePosition(State* state, int& renderRow, int& renderCol);
-void printChar(State* state, int row, int col, char c, int color);
-void printChar(State* state, int& row, int& col, char c, int color, bool advance);
-int getSearchColor(State* state, int row, unsigned int startOfSearch);
-unsigned int renderAutoComplete(State* state, int row, unsigned int col, unsigned int renderCol);
+void printChar(State* state, int32_t row, int32_t col, char c, int32_t color);
+void printChar(State* state, int& row, int& col, char c, int32_t color, bool advance);
+int32_t getSearchColor(State* state, int32_t row, uint32_t startOfSearch);
+uint32_t renderAutoComplete(State* state, int32_t row, uint32_t col, uint32_t renderCol);
 std::string getRenderBlameString(State* state);
-void printLineNumber(State* state, int row, int renderRow);
-int printLineContent(State* state, int row, int renderRow, Cursor* cursor);
-bool isRowColInVisual(State* state, unsigned int i, unsigned int j);
+void printLineNumber(State* state, int32_t row, int32_t renderRow);
+int32_t printLineContent(State* state, int32_t row, int32_t renderRow, Cursor* cursor);
+bool isRowColInVisual(State* state, uint32_t i, uint32_t j);
diff --git a/src/util/state.cpp b/src/util/state.cpp
index ac8a6ea..943d256 100644
--- a/src/util/state.cpp
+++ b/src/util/state.cpp
@@ -8,13 +8,13 @@
 #include <string>
 #include <vector>
 
-unsigned int State::maxX = 0;
-unsigned int State::maxY = 0;
+uint32_t State::maxX = 0;
+uint32_t State::maxY = 0;
 
 void State::changeFile(std::string filename) {
     auto normalizedFilename = normalizeFilename(filename);
     bool found = false;
-    for (unsigned int i = 0; i < this->archives.size(); i++) {
+    for (uint32_t i = 0; i < this->archives.size(); i++) {
         if (this->archives[i].filename == this->filename) {
             this->archives[i].previousState = this->previousState;
             this->archives[i].history = this->history;
@@ -39,7 +39,7 @@ void State::changeFile(std::string filename) {
             this->jumplist,
         });
     }
-    for (unsigned int i = 0; i < this->archives.size(); i++) {
+    for (uint32_t i = 0; i < this->archives.size(); i++) {
         if (this->archives[i].filename == normalizedFilename) {
             auto archive = this->archives[i];
             this->filename = normalizedFilename;
@@ -193,7 +193,7 @@ State::State(std::string filename) : State() {
     refocusFileExplorer(this, false);
 }
 
-void State::setMaxYX(int y, int x) {
-    State::maxY = (unsigned int)y;
-    State::maxX = (unsigned int)x;
+void State::setMaxYX(int32_t y, int32_t x) {
+    State::maxY = (uint32_t)y;
+    State::maxX = (uint32_t)x;
 }
diff --git a/src/util/state.h b/src/util/state.h
index 1c5d8d8..b8af671 100644
--- a/src/util/state.h
+++ b/src/util/state.h
@@ -9,42 +9,42 @@
 
 struct buildError {
     std::string filename;
-    int row;
-    int col;
+    int32_t row;
+    int32_t col;
     std::string msg;
 };
 
 struct grepMatch {
     std::filesystem::path path;
-    int lineNum;
+    int32_t lineNum;
     std::string line;
 
-    grepMatch(const std::filesystem::path& p, int num, const std::string& l) : path(p), lineNum(num), line(l) {}
+    grepMatch(const std::filesystem::path& p, int32_t num, const std::string& l) : path(p), lineNum(num), line(l) {}
 };
 
 struct diffLine {
-    unsigned int lineNum;
+    uint32_t lineNum;
     bool add; // true for add, false for delete
     std::string line;
 };
 
 struct Position {
-    unsigned int row;
-    unsigned int col;
+    uint32_t row;
+    uint32_t col;
 };
 
 struct WordPosition {
-    unsigned int min;
-    unsigned int max;
+    uint32_t min;
+    uint32_t max;
 };
 
 struct Mark {
     std::string filename;
-    unsigned int mark;
+    uint32_t mark;
 };
 
 struct Jumplist {
-    unsigned int index;
+    uint32_t index;
     std::vector<Position> list;
 };
 
@@ -52,17 +52,17 @@ struct Archive {
     std::string filename;
     std::vector<std::string> previousState;
     std::vector<std::vector<diffLine>> history;
-    int historyPosition;
+    int32_t historyPosition;
     struct Position windowPosition;
-    unsigned int row;
-    unsigned int col;
+    uint32_t row;
+    uint32_t col;
     Jumplist jumplist;
 };
 
 struct Query {
     std::string query;
-    unsigned int cursor;
-    unsigned int selection;
+    uint32_t cursor;
+    uint32_t selection;
 };
 
 class State {
@@ -70,38 +70,38 @@ public:
     bool showGrep;
     bool wordwrap;
     bool fileExplorerOpen;
-    int fileExplorerSize;
-    int fileExplorerIndex;
-    int fileExplorerWindowLine;
+    int32_t fileExplorerSize;
+    int32_t fileExplorerIndex;
+    int32_t fileExplorerWindowLine;
     Position matching;
     bool autosave;
     bool searchFail;
     Jumplist jumplist;
     std::vector<Archive> archives;
-    int buildErrorIndex;
+    int32_t buildErrorIndex;
     std::vector<std::string> buildErrors;
     std::vector<std::string> blame;
     std::vector<std::string> harpoonFiles;
-    unsigned int harpoonIndex;
+    uint32_t harpoonIndex;
     std::string buildDir;
     std::string filename;
     std::vector<std::string> data;
     std::vector<std::string> previousState;
     std::vector<std::string> fileStack;
-    unsigned int fileStackIndex;
+    uint32_t fileStackIndex;
     std::vector<std::vector<diffLine>> history;
-    int historyPosition;
+    int32_t historyPosition;
     bool searching;
     bool replacing;
-    unsigned int indent;
+    uint32_t indent;
     Mark mark;
     struct Position windowPosition;
-    static unsigned int maxX;
-    static unsigned int maxY;
+    static uint32_t maxX;
+    static uint32_t maxY;
     VisualType visualType;
     struct Position visual;
-    unsigned int row;
-    unsigned int col;
+    uint32_t row;
+    uint32_t col;
     std::string commentSymbol;
     Query name;
     Query search;
@@ -131,5 +131,5 @@ public:
     void resetState(std::string filename);
     void pushFileStack(std::string filename);
     void changeFile(std::string filename);
-    static void setMaxYX(int y, int x);
+    static void setMaxYX(int32_t y, int32_t x);
 };
