diff --git a/src/keybinds/sendFileExplorerKeys.cpp b/src/keybinds/sendFileExplorerKeys.cpp
index 69fe370..5a30482 100644
--- a/src/keybinds/sendFileExplorerKeys.cpp
+++ b/src/keybinds/sendFileExplorerKeys.cpp
@@ -58,6 +58,8 @@ void sendFileExplorerKeys(State* state, int c) {
             auto relativePath = std::filesystem::relative(node->path.string(), baseDir);
             state->changeFile(relativePath);
         }
+    } else {
+        return;
     }
     centerFileExplorer(state);
 }
diff --git a/src/util/render.cpp b/src/util/render.cpp
index 91cd5ee..55d5c83 100644
--- a/src/util/render.cpp
+++ b/src/util/render.cpp
@@ -443,8 +443,6 @@ void renderVisibleLines(State* state) {
 void moveCursor(State* state, int cursorPosition) {
     if (cursorPosition != -1) {
         move(0, cursorPosition);
-    } else if (state->mode == FILEEXPLORER) {
-        move(state->fileExplorerIndex + 1, 0);
     } else {
         unsigned int row = state->row + 1;
         if (row > state->windowPosition.row) {
@@ -467,7 +465,7 @@ void moveCursor(State* state, int cursorPosition) {
     }
 }
 
-int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::string startingSpaces, bool isFileExplorerOpen, int fileExplorerWindowLine) {
+int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::string startingSpaces, bool isFileExplorerOpen, int fileExplorerWindowLine, int fileExplorerSize) {
     int color;
     if (shouldIgnoreFile(node->path)) {
         color = GREY;
@@ -493,25 +491,27 @@ int renderFileExplorerNode(FileExplorerNode* node, int r, int selectedRow, std::
         mvprintw_color(
             displayRow,
             offset,
-            (std::string("%-") + std::to_string(40 - offset - 1) + std::string("s")).c_str(),
-            node->name.length() >= 40 ? (node->name.substr(0, 37) + "...").c_str() : node->name.substr(0, 40).c_str(),
+            (std::string("%-") + std::to_string(fileExplorerSize - offset - 1) + std::string("s")).c_str(),
+            (int)node->name.length() >= fileExplorerSize - offset - 1
+                ? (node->name.substr(0, fileExplorerSize - 3 - offset - 1) + "...").c_str()
+                : node->name.substr(0, fileExplorerSize - offset - 1).c_str(),
             color
         );
-        offset += node->name.substr(0, 40).length();
+        offset += node->name.substr(0, fileExplorerSize - offset - 1).length();
         if (selectedRow == r) {
             mvprintw_color(displayRow, offset, "%s", "]", isFileExplorerOpen ? RED : YELLOW);
         }
     }
     if (node->isOpen) {
         for(unsigned int i = 0; i < node->children.size(); i++) {
-            row = renderFileExplorerNode(&node->children[i], row, selectedRow, startingSpaces + "  ", isFileExplorerOpen, fileExplorerWindowLine);
+            row = renderFileExplorerNode(&node->children[i], row, selectedRow, startingSpaces + "  ", isFileExplorerOpen, fileExplorerWindowLine, fileExplorerSize);
         }
     }
     return row;
 }
 
 void renderFileExplorer(State* state) {
-    renderFileExplorerNode(state->fileExplorer, 0, state->fileExplorerIndex, std::string(""), state->mode == FILEEXPLORER, state->fileExplorerWindowLine);
+    renderFileExplorerNode(state->fileExplorer, 0, state->fileExplorerIndex, std::string(""), state->mode == FILEEXPLORER, state->fileExplorerWindowLine, state->fileExplorerSize);
 }
 
 void renderScreen(State* state) {
diff --git a/src/util/state.cpp b/src/util/state.cpp
index 892765b..e498c00 100644
--- a/src/util/state.cpp
+++ b/src/util/state.cpp
@@ -115,7 +115,7 @@ State::State() {
     this->fileExplorer = new FileExplorerNode(std::filesystem::current_path());
     this->fileExplorer->open();
     this->fileExplorerOpen = true;
-    this->fileExplorerSize = 46;
+    this->fileExplorerSize = 40;
     this->fileExplorerWindowLine = 0;
     this->fileExplorerIndex = 0;
     this->autosave = true;
