diff --git a/src/keybinds/sendShortcutKeys.cpp b/src/keybinds/sendShortcutKeys.cpp
index 66b8ced..805c117 100644
--- a/src/keybinds/sendShortcutKeys.cpp
+++ b/src/keybinds/sendShortcutKeys.cpp
@@ -140,13 +140,14 @@ void sendShortcutKeys(State* state, int c) {
             flags += " -p " + state->buildDir;
         }
         flags += " --noEmit";
+        std::string command = "tsc" + flags + " 2>&1 | grep 'error TS' | sed 's/):/:/' | sed 's/(/:/' | sed 's/,/:/'";
         try {
             state->buildErrorIndex = 0;
-            state->buildErrors = runCommandAndCaptureOutput("tsc" + flags + " 2>&1 | grep 'error TS' | sed 's/):/:/' | sed 's/(/:/'");
-            jumpToBuildError(state);
+            state->buildErrors = runCommandAndCaptureOutput(command);
         } catch (const std::exception& e) {
             state->status = "invalid build target: " + state->buildDir;
         }
+        jumpToBuildError(state);
     } else if (c == ':') {
         state->mode = COMMANDLINE;
     } else if (c == '<') {
diff --git a/src/util/helper.cpp b/src/util/helper.cpp
index 739a5a6..38b0d55 100644
--- a/src/util/helper.cpp
+++ b/src/util/helper.cpp
@@ -37,7 +37,7 @@ void jumpToBuildError(State* state) {
                 }
             }
             for (; i < state->buildErrors[state->buildErrorIndex].length(); i++) {
-                if (state->buildErrors[state->buildErrorIndex][i] != ',') {
+                if (state->buildErrors[state->buildErrorIndex][i] != ':') {
                     foundRow += state->buildErrors[state->buildErrorIndex][i];
                 } else {
                     i++;
@@ -57,7 +57,7 @@ void jumpToBuildError(State* state) {
                 state->changeFile(filename);
                 state->row = std::stoi(foundRow) - 1;
                 state->col = std::stoi(foundCol) - 1;
-                state->status = "(" + std::to_string(state->buildErrorIndex + 1) + " of " + std::to_string(state->buildErrors.size()) + ") " + state->buildErrors[state->buildErrorIndex].substr(i);
+                state->status = "(" + std::to_string(state->buildErrorIndex + 1) + " of " + std::to_string(state->buildErrors.size()) + ")" + state->buildErrors[state->buildErrorIndex].substr(i);
             } else {
                 state->status = std::string("invalid buildError format: ") + state->buildErrors[state->buildErrorIndex];
             }
@@ -78,30 +78,17 @@ bool isInt(const std::string& s) {
 
 std::vector<std::string> runCommandAndCaptureOutput(const std::string& command) {
     std::vector<std::string> outputLines;
-    std::string shellCommand = "bash -c \"set -o pipefail && " + command + "\"";
-    FILE* pipe = popen(shellCommand.c_str(), "r");
+    std::string line;
+    std::unique_ptr<FILE, int(*)(FILE*)> pipe(popen(command.c_str(), "r"), pclose);
     if (!pipe) {
-        throw std::runtime_error(command);
+        throw std::runtime_error("popen() failed!");
     }
-    std::string line;
     char buffer[4096];
-    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
+    while (fgets(buffer, sizeof(buffer), pipe.get()) != nullptr) {
         line = buffer;
-        size_t pos = line.find('(');
-        if (pos != std::string::npos) {
-            line.replace(pos, 1, ":");
-        }
 
         outputLines.push_back(line);
     }
-    int status = pclose(pipe);
-    if (status == -1) {
-        throw std::runtime_error("Failed to get command exit status: " + command);
-    }
-    int exitCode = WEXITSTATUS(status);
-    if (exitCode != 0) {
-        throw std::runtime_error(command);
-    }
     return outputLines;
 }
 
