#pragma once

#include "state.h"
#include "visualType.h"
#include <filesystem>
#include <fstream>
#include <string>
#include <vector>

bool isColTooSmall(State *state);
bool isColTooBig(State *state);
uint32_t getDisplayCol(State *state);
uint32_t getDisplayLength(State *state, std::string s);
std::string minimize_filename(const std::string &filename);
std::string padTo(std::string str, const uint32_t num, const char paddingChar);
void forwardFileStack(State *state);
void backwardFileStack(State *state);
void swapCase(State *state, uint32_t r, uint32_t c);
void focusHarpoon(State *state);
void recordHistory(State *state, std::vector<diffLine> diff);
void recordJumpList(State *state);
void recordMacroCommand(State *state, char c);
void insertFinalEmptyNewline(State *state);
std::string replaceAll(std::string str, const std::string &from, const std::string &to);
bool isLineFileRegex(const std::string &line);
bool matchesEditorConfigGlob(const std::string &pattern, const std::string &filepath);
char getIndentCharacter(State *state);
uint32_t getIndentSize(State *state);
std::string getRelativeToLastAndRoute(State *state);
std::string getRelativeToCurrent(State *state, std::string p);
void recordMotion(State *state, int32_t c);
void setDotCommand(State *state, int32_t c);
void setDotCommand(State *state, std::string s);
bool createNewestHarpoon(State *state);
void jumpToPrevHarpoon(State *state);
void jumpToNextHarpoon(State *state);
bool jumpToHarpoon(State *state, uint32_t num);
bool isAlphanumeric(char c);
bool isOffScreenVertical(State *state);
uint32_t getCenteredWindowPosition(State *state);
uint32_t getDisplayRows(State *state, uint32_t r, uint32_t c);
uint32_t getDisplayRows(State *state, uint32_t r);
void refocusFileExplorer(State *state, bool changeMode);
std::string normalizeFilename(std::string filename);
std::string setStringToLength(const std::string &s, uint32_t length);
bool isInt(const std::string &s);
bool isTestFile(const std::string &filepath);
void rename(State *state, const std::filesystem::path &oldPath, const std::string &newName);
void createFolder(State *state, std::filesystem::path path, std::string name);
std::filesystem::path getUniqueFilePath(const std::filesystem::path &basePath);
void createFile(State *state, std::filesystem::path path, std::string name);
void changeToGrepFile(State *state);
void findDefinitionFromGrepOutput(State *state, std::string s);
void upScreen(State *state);
void downScreen(State *state);
void centerFileExplorer(State *state);
void resetValidCursorState(State *state);
bool setSearchResultCurrentLine(State *state, const std::string &query);
Position matchIt(State *state);
bool searchFromTop(State *state);
void getAndAddNumber(State *state, uint32_t row, uint32_t col, int32_t num);
std::string safeSubstring(const std::string &str, std::size_t pos, std::size_t len);
std::string safeSubstring(const std::string &str, std::size_t pos);
bool isAllLowercase(const std::string &str);
uint32_t findNextChar(State *state, char c);
uint32_t toNextChar(State *state, char c);
uint32_t getPrevEmptyLine(State *state);
uint32_t getNextEmptyLine(State *state);
std::string getGitHash(State *state);
std::vector<std::string> getGitBlame(const std::string &filename);
uint32_t getLineNumberOffset(State *state);
void runCommand(State *state, const std::string &command);
void replaceAllGlobally(State *state, const std::string &query, const std::string &replace);
void replaceCurrentLine(State *state, const std::string &query, const std::string &replace);
std::string getCurrentWord(State *state);
std::string autocomplete(State *state, const std::string &query);
std::string getCommentSymbol(const std::string &filename);
std::string getExtension(const std::string &filename);
void moveHarpoonLeft(State *state);
void moveHarpoonRight(State *state);
bool isWindowPositionHorizontalInvalid(State *state);
void ltrim(std::string &s);
void rtrim(std::string &s);
void replaceAll(State *state, const std::string &query, const std::string &replace);
bool setSearchResultReverse(State *state);
void fixColOverMax(State *state);
WordPosition findQuoteBounds(const std::string &str, char quoteChar, uint32_t cursor, bool includeQuote);
bool setSearchResult(State *state);
void setPosition(State *state, Position pos);
void initVisual(State *state, VisualType visualType);
bool is_number(const std::string &s);
WordPosition findParentheses(const std::string &str, char openParen, char closeParen, uint32_t cursor,
			     bool includeParen);
uint32_t getIndent(const std::string &str);
uint32_t getNextLineSameIndent(State *state);
uint32_t getPrevLineSameIndent(State *state);
WordPosition getBigWordPosition(const std::string &str, uint32_t cursor);
WordPosition getWordPosition(const std::string &str, uint32_t cursor);
std::vector<grepMatch> grepFiles(const std::filesystem::path &dir_path, const std::string &query, bool allowAllFiles);
void generateGrepOutput(State *state, bool resetCursor);
bool filePathContainsSubstring(const std::filesystem::path &filePath, const std::string &query);
bool shouldIgnoreFile(const std::filesystem::path &path);
std::vector<std::filesystem::path> findFiles(const std::filesystem::path &dir_path, const std::string &query);
void generateFindFileOutput(State *state);
uint32_t w(State *state);
uint32_t b(State *state);
void insertEmptyLineBelow(State *state);
void indent(State *state);
void deindent(State *state);
void insertEmptyLine(State *state);
std::vector<std::string> readFile(const std::string &filename);
void saveFile(State *state);
void trimTrailingWhitespace(State *state);
bool isWindowPositionInvalid(State *state);
void centerScreen(State *state);
void up(State *state);
void upVisual(State *state);
void down(State *state);
void downVisual(State *state);
void left(State *state);
void right(State *state);
void downHalfScreen(State *state);
void upHalfScreen(State *state);
char ctrl(char c);
char unctrl(char c);
void calcWindowBounds();
int32_t getIndexFirstNonSpace(State *state);
void sanityCheckRowColOutOfBounds(State *state);
void sanityCheckDocumentEmpty(State *state);
int32_t minimum(int32_t a, int32_t b);
int32_t maximum(int32_t a, int32_t b);
